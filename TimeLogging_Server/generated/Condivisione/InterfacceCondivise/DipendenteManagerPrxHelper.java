// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public final class DipendenteManagerPrxHelper extends Ice.ObjectPrxHelperBase implements DipendenteManagerPrx
{
    private static final String __UpdateDipendente_name = "UpdateDipendente";

    public int UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return UpdateDipendente(dipendente, null, false);
    }

    public int UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return UpdateDipendente(dipendente, __ctx, true);
    }

    private int UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "UpdateDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("UpdateDipendente");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.UpdateDipendente(dipendente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return begin_UpdateDipendente(dipendente, null, false, null);
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return begin_UpdateDipendente(dipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Ice.Callback __cb)
    {
        return begin_UpdateDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_UpdateDipendente(dipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Callback_DipendenteManager_UpdateDipendente __cb)
    {
        return begin_UpdateDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Callback_DipendenteManager_UpdateDipendente __cb)
    {
        return begin_UpdateDipendente(dipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__UpdateDipendente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __UpdateDipendente_name, __cb);
        try
        {
            __result.__prepare(__UpdateDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipendente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_UpdateDipendente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __UpdateDipendente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __createDipendente_name = "createDipendente";

    public void createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        createDipendente(dipendente, null, false);
    }

    public void createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        createDipendente(dipendente, __ctx, true);
    }

    private void createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "createDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    __del.createDipendente(dipendente, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return begin_createDipendente(dipendente, null, false, null);
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return begin_createDipendente(dipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Ice.Callback __cb)
    {
        return begin_createDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createDipendente(dipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Callback_DipendenteManager_createDipendente __cb)
    {
        return begin_createDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Callback_DipendenteManager_createDipendente __cb)
    {
        return begin_createDipendente(dipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __createDipendente_name, __cb);
        try
        {
            __result.__prepare(__createDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipendente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_createDipendente(Ice.AsyncResult __result)
    {
        __end(__result, __createDipendente_name);
    }

    private static final String __deleteDipendente_name = "deleteDipendente";

    public int deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente)
    {
        return deleteDipendente(dipentente, null, false);
    }

    public int deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx)
    {
        return deleteDipendente(dipentente, __ctx, true);
    }

    private int deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "deleteDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("deleteDipendente");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.deleteDipendente(dipentente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente)
    {
        return begin_deleteDipendente(dipentente, null, false, null);
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx)
    {
        return begin_deleteDipendente(dipentente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, Ice.Callback __cb)
    {
        return begin_deleteDipendente(dipentente, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteDipendente(dipentente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, Callback_DipendenteManager_deleteDipendente __cb)
    {
        return begin_deleteDipendente(dipentente, null, false, __cb);
    }

    public Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx, Callback_DipendenteManager_deleteDipendente __cb)
    {
        return begin_deleteDipendente(dipentente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteDipendente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __deleteDipendente_name, __cb);
        try
        {
            __result.__prepare(__deleteDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipentente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_deleteDipendente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __deleteDipendente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListAllDipendenti_name = "getListAllDipendenti";

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListAllDipendenti()
    {
        return getListAllDipendenti(null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListAllDipendenti(java.util.Map<String, String> __ctx)
    {
        return getListAllDipendenti(__ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListAllDipendenti(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListAllDipendenti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListAllDipendenti");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.getListAllDipendenti(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListAllDipendenti()
    {
        return begin_getListAllDipendenti(null, false, null);
    }

    public Ice.AsyncResult begin_getListAllDipendenti(java.util.Map<String, String> __ctx)
    {
        return begin_getListAllDipendenti(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getListAllDipendenti(Ice.Callback __cb)
    {
        return begin_getListAllDipendenti(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListAllDipendenti(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListAllDipendenti(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListAllDipendenti(Callback_DipendenteManager_getListAllDipendenti __cb)
    {
        return begin_getListAllDipendenti(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListAllDipendenti(java.util.Map<String, String> __ctx, Callback_DipendenteManager_getListAllDipendenti __cb)
    {
        return begin_getListAllDipendenti(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListAllDipendenti(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListAllDipendenti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListAllDipendenti_name, __cb);
        try
        {
            __result.__prepare(__getListAllDipendenti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> end_getListAllDipendenti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListAllDipendenti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaDipendentiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListConsulenti_name = "getListConsulenti";

    public java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return getListConsulenti(dipendente, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return getListConsulenti(dipendente, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListConsulenti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListConsulenti");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.getListConsulenti(dipendente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return begin_getListConsulenti(dipendente, null, false, null);
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return begin_getListConsulenti(dipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Ice.Callback __cb)
    {
        return begin_getListConsulenti(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListConsulenti(dipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Callback_DipendenteManager_getListConsulenti __cb)
    {
        return begin_getListConsulenti(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Callback_DipendenteManager_getListConsulenti __cb)
    {
        return begin_getListConsulenti(dipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListConsulenti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListConsulenti_name, __cb);
        try
        {
            __result.__prepare(__getListConsulenti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipendente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> end_getListConsulenti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListConsulenti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaConsulentiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListDipendentiAttivita_name = "getListDipendentiAttivita";

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto)
    {
        return getListDipendentiAttivita(progetto, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx)
    {
        return getListDipendentiAttivita(progetto, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListDipendentiAttivita", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListDipendentiAttivita");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.getListDipendentiAttivita(progetto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto)
    {
        return begin_getListDipendentiAttivita(progetto, null, false, null);
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx)
    {
        return begin_getListDipendentiAttivita(progetto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, Ice.Callback __cb)
    {
        return begin_getListDipendentiAttivita(progetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListDipendentiAttivita(progetto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, Callback_DipendenteManager_getListDipendentiAttivita __cb)
    {
        return begin_getListDipendentiAttivita(progetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx, Callback_DipendenteManager_getListDipendentiAttivita __cb)
    {
        return begin_getListDipendentiAttivita(progetto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListDipendentiAttivita_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListDipendentiAttivita_name, __cb);
        try
        {
            __result.__prepare(__getListDipendentiAttivita_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(progetto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> end_getListDipendentiAttivita(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListDipendentiAttivita_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaDipendentiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListManager_name = "getListManager";

    public java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> getListManager()
    {
        return getListManager(null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> getListManager(java.util.Map<String, String> __ctx)
    {
        return getListManager(__ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> getListManager(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListManager", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListManager");
                    __delBase = __getDelegate(false);
                    _DipendenteManagerDel __del = (_DipendenteManagerDel)__delBase;
                    return __del.getListManager(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListManager()
    {
        return begin_getListManager(null, false, null);
    }

    public Ice.AsyncResult begin_getListManager(java.util.Map<String, String> __ctx)
    {
        return begin_getListManager(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getListManager(Ice.Callback __cb)
    {
        return begin_getListManager(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListManager(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListManager(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListManager(Callback_DipendenteManager_getListManager __cb)
    {
        return begin_getListManager(null, false, __cb);
    }

    public Ice.AsyncResult begin_getListManager(java.util.Map<String, String> __ctx, Callback_DipendenteManager_getListManager __cb)
    {
        return begin_getListManager(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListManager(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListManager_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListManager_name, __cb);
        try
        {
            __result.__prepare(__getListManager_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> end_getListManager(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListManager_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaManagerHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static DipendenteManagerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DipendenteManagerPrx)
            {
                __d = (DipendenteManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DipendenteManagerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DipendenteManagerPrx)
            {
                __d = (DipendenteManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DipendenteManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DipendenteManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DipendenteManagerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof DipendenteManagerPrx)
            {
                __d = (DipendenteManagerPrx)__obj;
            }
            else
            {
                DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DipendenteManagerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DipendenteManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DipendenteManagerPrxHelper __h = new DipendenteManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::DipendenteManager",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _DipendenteManagerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _DipendenteManagerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, DipendenteManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static DipendenteManagerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DipendenteManagerPrxHelper result = new DipendenteManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
