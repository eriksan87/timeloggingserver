// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public final class AttivitaManagerPrxHelper extends Ice.ObjectPrxHelperBase implements AttivitaManagerPrx
{
    private static final String __eliminaAttivita_name = "eliminaAttivita";

    public void eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita)
    {
        eliminaAttivita(attivita, null, false);
    }

    public void eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx)
    {
        eliminaAttivita(attivita, __ctx, true);
    }

    private void eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "eliminaAttivita", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    __del.eliminaAttivita(attivita, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita)
    {
        return begin_eliminaAttivita(attivita, null, false, null);
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx)
    {
        return begin_eliminaAttivita(attivita, __ctx, true, null);
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, Ice.Callback __cb)
    {
        return begin_eliminaAttivita(attivita, null, false, __cb);
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_eliminaAttivita(attivita, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, Callback_AttivitaManager_eliminaAttivita __cb)
    {
        return begin_eliminaAttivita(attivita, null, false, __cb);
    }

    public Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx, Callback_AttivitaManager_eliminaAttivita __cb)
    {
        return begin_eliminaAttivita(attivita, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_eliminaAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa attivita, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __eliminaAttivita_name, __cb);
        try
        {
            __result.__prepare(__eliminaAttivita_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(attivita);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_eliminaAttivita(Ice.AsyncResult __result)
    {
        __end(__result, __eliminaAttivita_name);
    }

    private static final String __getAllSp_name = "getAllSp";

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager)
    {
        return getAllSp(manager, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx)
    {
        return getAllSp(manager, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllSp", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllSp");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getAllSp(manager, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager)
    {
        return begin_getAllSp(manager, null, false, null);
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx)
    {
        return begin_getAllSp(manager, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, Ice.Callback __cb)
    {
        return begin_getAllSp(manager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllSp(manager, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, Callback_AttivitaManager_getAllSp __cb)
    {
        return begin_getAllSp(manager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getAllSp __cb)
    {
        return begin_getAllSp(manager, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllSp(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllSp_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllSp_name, __cb);
        try
        {
            __result.__prepare(__getAllSp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(manager);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> end_getAllSp(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllSp_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaSottoProgettiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllTask_name = "getAllTask";

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getAllTask()
    {
        return getAllTask(null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getAllTask(java.util.Map<String, String> __ctx)
    {
        return getAllTask(__ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getAllTask(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllTask");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getAllTask(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllTask()
    {
        return begin_getAllTask(null, false, null);
    }

    public Ice.AsyncResult begin_getAllTask(java.util.Map<String, String> __ctx)
    {
        return begin_getAllTask(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllTask(Ice.Callback __cb)
    {
        return begin_getAllTask(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllTask(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllTask(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllTask(Callback_AttivitaManager_getAllTask __cb)
    {
        return begin_getAllTask(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllTask(java.util.Map<String, String> __ctx, Callback_AttivitaManager_getAllTask __cb)
    {
        return begin_getAllTask(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllTask(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllTask_name, __cb);
        try
        {
            __result.__prepare(__getAllTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> end_getAllTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaTaskHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListProgetti_name = "getListProgetti";

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return getListProgetti(dipendente, abilitati, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx)
    {
        return getListProgetti(dipendente, abilitati, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListProgetti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListProgetti");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListProgetti(dipendente, abilitati, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return begin_getListProgetti(dipendente, abilitati, null, false, null);
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx)
    {
        return begin_getListProgetti(dipendente, abilitati, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, Ice.Callback __cb)
    {
        return begin_getListProgetti(dipendente, abilitati, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListProgetti(dipendente, abilitati, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, Callback_AttivitaManager_getListProgetti __cb)
    {
        return begin_getListProgetti(dipendente, abilitati, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListProgetti __cb)
    {
        return begin_getListProgetti(dipendente, abilitati, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListProgetti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListProgetti_name, __cb);
        try
        {
            __result.__prepare(__getListProgetti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipendente);
            __os.writeBool(abilitati);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> end_getListProgetti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListProgetti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaProgettiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListProgettiClienti_name = "getListProgettiClienti";

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente)
    {
        return getListProgettiClienti(cliente, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx)
    {
        return getListProgettiClienti(cliente, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListProgettiClienti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListProgettiClienti");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListProgettiClienti(cliente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente)
    {
        return begin_getListProgettiClienti(cliente, null, false, null);
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx)
    {
        return begin_getListProgettiClienti(cliente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, Ice.Callback __cb)
    {
        return begin_getListProgettiClienti(cliente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListProgettiClienti(cliente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, Callback_AttivitaManager_getListProgettiClienti __cb)
    {
        return begin_getListProgettiClienti(cliente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListProgettiClienti __cb)
    {
        return begin_getListProgettiClienti(cliente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListProgettiClienti(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListProgettiClienti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListProgettiClienti_name, __cb);
        try
        {
            __result.__prepare(__getListProgettiClienti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(cliente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> end_getListProgettiClienti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListProgettiClienti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaProgettiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListSottoProgetti_name = "getListSottoProgetti";

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return getListSottoProgetti(idprogetto, dipendente, abilitati, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx)
    {
        return getListSottoProgetti(idprogetto, dipendente, abilitati, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListSottoProgetti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListSottoProgetti");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListSottoProgetti(idprogetto, dipendente, abilitati, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, null, false, null);
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, Ice.Callback __cb)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, Callback_AttivitaManager_getListSottoProgetti __cb)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListSottoProgetti __cb)
    {
        return begin_getListSottoProgetti(idprogetto, dipendente, abilitati, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListSottoProgetti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListSottoProgetti_name, __cb);
        try
        {
            __result.__prepare(__getListSottoProgetti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(idprogetto);
            __os.writeObject(dipendente);
            __os.writeBool(abilitati);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> end_getListSottoProgetti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListSottoProgetti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaSottoProgettiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListSottoprogettiManager_name = "getListSottoprogettiManager";

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager)
    {
        return getListSottoprogettiManager(manager, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx)
    {
        return getListSottoprogettiManager(manager, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListSottoprogettiManager", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListSottoprogettiManager");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListSottoprogettiManager(manager, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager)
    {
        return begin_getListSottoprogettiManager(manager, null, false, null);
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx)
    {
        return begin_getListSottoprogettiManager(manager, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, Ice.Callback __cb)
    {
        return begin_getListSottoprogettiManager(manager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListSottoprogettiManager(manager, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, Callback_AttivitaManager_getListSottoprogettiManager __cb)
    {
        return begin_getListSottoprogettiManager(manager, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListSottoprogettiManager __cb)
    {
        return begin_getListSottoprogettiManager(manager, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListSottoprogettiManager(Condivisione.EntityCondivise.EManagerCondiviso manager, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListSottoprogettiManager_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListSottoprogettiManager_name, __cb);
        try
        {
            __result.__prepare(__getListSottoprogettiManager_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(manager);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> end_getListSottoprogettiManager(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListSottoprogettiManager_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaSottoProgettiHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListTask_name = "getListTask";

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return getListTask(idsottoprogetto, abilitati, dipendente, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return getListTask(idsottoprogetto, abilitati, dipendente, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListTask");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListTask(idsottoprogetto, abilitati, dipendente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, null, false, null);
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Ice.Callback __cb)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, Callback_AttivitaManager_getListTask __cb)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListTask __cb)
    {
        return begin_getListTask(idsottoprogetto, abilitati, dipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListTask_name, __cb);
        try
        {
            __result.__prepare(__getListTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(idsottoprogetto);
            __os.writeBool(abilitati);
            __os.writeObject(dipendente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> end_getListTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaTaskHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getListTaskConsulente_name = "getListTaskConsulente";

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente)
    {
        return getListTaskConsulente(consulente, null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        return getListTaskConsulente(consulente, __ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getListTaskConsulente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getListTaskConsulente");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getListTaskConsulente(consulente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente)
    {
        return begin_getListTaskConsulente(consulente, null, false, null);
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        return begin_getListTaskConsulente(consulente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, Ice.Callback __cb)
    {
        return begin_getListTaskConsulente(consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getListTaskConsulente(consulente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, Callback_AttivitaManager_getListTaskConsulente __cb)
    {
        return begin_getListTaskConsulente(consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getListTaskConsulente __cb)
    {
        return begin_getListTaskConsulente(consulente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getListTaskConsulente(Condivisione.EntityCondivise.EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getListTaskConsulente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getListTaskConsulente_name, __cb);
        try
        {
            __result.__prepare(__getListTaskConsulente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(consulente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> end_getListTaskConsulente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getListTaskConsulente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> __ret;
            __ret = Condivisione.EntityCondivise.listaTaskHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getProgetto_name = "getProgetto";

    public Condivisione.EntityCondivise.EProgettoCondiviso getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto)
    {
        return getProgetto(progetto, null, false);
    }

    public Condivisione.EntityCondivise.EProgettoCondiviso getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx)
    {
        return getProgetto(progetto, __ctx, true);
    }

    private Condivisione.EntityCondivise.EProgettoCondiviso getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getProgetto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getProgetto");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getProgetto(progetto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto)
    {
        return begin_getProgetto(progetto, null, false, null);
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx)
    {
        return begin_getProgetto(progetto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, Ice.Callback __cb)
    {
        return begin_getProgetto(progetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getProgetto(progetto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, Callback_AttivitaManager_getProgetto __cb)
    {
        return begin_getProgetto(progetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getProgetto __cb)
    {
        return begin_getProgetto(progetto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getProgetto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getProgetto_name, __cb);
        try
        {
            __result.__prepare(__getProgetto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(progetto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Condivisione.EntityCondivise.EProgettoCondiviso end_getProgetto(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getProgetto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Condivisione.EntityCondivise.EProgettoCondivisoHolder __ret = new Condivisione.EntityCondivise.EProgettoCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSottoprogetto_name = "getSottoprogetto";

    public Condivisione.EntityCondivise.ESottoprogettoCondiviso getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto)
    {
        return getSottoprogetto(sprogetto, null, false);
    }

    public Condivisione.EntityCondivise.ESottoprogettoCondiviso getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx)
    {
        return getSottoprogetto(sprogetto, __ctx, true);
    }

    private Condivisione.EntityCondivise.ESottoprogettoCondiviso getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSottoprogetto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSottoprogetto");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getSottoprogetto(sprogetto, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto)
    {
        return begin_getSottoprogetto(sprogetto, null, false, null);
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx)
    {
        return begin_getSottoprogetto(sprogetto, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, Ice.Callback __cb)
    {
        return begin_getSottoprogetto(sprogetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSottoprogetto(sprogetto, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, Callback_AttivitaManager_getSottoprogetto __cb)
    {
        return begin_getSottoprogetto(sprogetto, null, false, __cb);
    }

    public Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getSottoprogetto __cb)
    {
        return begin_getSottoprogetto(sprogetto, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSottoprogetto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSottoprogetto_name, __cb);
        try
        {
            __result.__prepare(__getSottoprogetto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(sprogetto);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Condivisione.EntityCondivise.ESottoprogettoCondiviso end_getSottoprogetto(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSottoprogetto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Condivisione.EntityCondivise.ESottoprogettoCondivisoHolder __ret = new Condivisione.EntityCondivise.ESottoprogettoCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTask_name = "getTask";

    public Condivisione.EntityCondivise.ETaskCondiviso getTask(Condivisione.EntityCondivise.ETaskCondiviso task)
    {
        return getTask(task, null, false);
    }

    public Condivisione.EntityCondivise.ETaskCondiviso getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx)
    {
        return getTask(task, __ctx, true);
    }

    private Condivisione.EntityCondivise.ETaskCondiviso getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTask");
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    return __del.getTask(task, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task)
    {
        return begin_getTask(task, null, false, null);
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx)
    {
        return begin_getTask(task, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, Ice.Callback __cb)
    {
        return begin_getTask(task, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTask(task, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, Callback_AttivitaManager_getTask __cb)
    {
        return begin_getTask(task, null, false, __cb);
    }

    public Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx, Callback_AttivitaManager_getTask __cb)
    {
        return begin_getTask(task, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTask(Condivisione.EntityCondivise.ETaskCondiviso task, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTask_name, __cb);
        try
        {
            __result.__prepare(__getTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(task);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Condivisione.EntityCondivise.ETaskCondiviso end_getTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Condivisione.EntityCondivise.ETaskCondivisoHolder __ret = new Condivisione.EntityCondivise.ETaskCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __saveAttivita_name = "saveAttivita";

    public void saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e)
    {
        saveAttivita(e, null, false);
    }

    public void saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx)
    {
        saveAttivita(e, __ctx, true);
    }

    private void saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "saveAttivita", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _AttivitaManagerDel __del = (_AttivitaManagerDel)__delBase;
                    __del.saveAttivita(e, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e)
    {
        return begin_saveAttivita(e, null, false, null);
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx)
    {
        return begin_saveAttivita(e, __ctx, true, null);
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, Ice.Callback __cb)
    {
        return begin_saveAttivita(e, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_saveAttivita(e, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, Callback_AttivitaManager_saveAttivita __cb)
    {
        return begin_saveAttivita(e, null, false, __cb);
    }

    public Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx, Callback_AttivitaManager_saveAttivita __cb)
    {
        return begin_saveAttivita(e, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __saveAttivita_name, __cb);
        try
        {
            __result.__prepare(__saveAttivita_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(e);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_saveAttivita(Ice.AsyncResult __result)
    {
        __end(__result, __saveAttivita_name);
    }

    public static AttivitaManagerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttivitaManagerPrx)
            {
                __d = (AttivitaManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AttivitaManagerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttivitaManagerPrx)
            {
                __d = (AttivitaManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static AttivitaManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AttivitaManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static AttivitaManagerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof AttivitaManagerPrx)
            {
                __d = (AttivitaManagerPrx)__obj;
            }
            else
            {
                AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static AttivitaManagerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        AttivitaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            AttivitaManagerPrxHelper __h = new AttivitaManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::AttivitaManager",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _AttivitaManagerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _AttivitaManagerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, AttivitaManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static AttivitaManagerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AttivitaManagerPrxHelper result = new AttivitaManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
