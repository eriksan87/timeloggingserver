// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public abstract class _TimeRecordManagerDisp extends Ice.ObjectImpl implements TimeRecordManager
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::TimeRecordManager",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final void elimina(Condivisione.EntityCondivise.ETimeRecordCondiviso e)
    {
        elimina(e, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.ETimeRecordCondiviso> getListTR(int idprogetto, int idsottoprogetto, int idtask, String dal, String al, String ultimi, boolean lavorativo, boolean nonlavorativo, String categoria, Condivisione.EntityCondivise.EDipendenteCondiviso dip)
    {
        return getListTR(idprogetto, idsottoprogetto, idtask, dal, al, ultimi, lavorativo, nonlavorativo, categoria, dip, null);
    }

    public final int save(Condivisione.EntityCondivise.ETimeRecordCondiviso e)
    {
        return save(e, null);
    }

    public static Ice.DispatchStatus ___save(TimeRecordManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.ETimeRecordCondivisoHolder e = new Condivisione.EntityCondivise.ETimeRecordCondivisoHolder();
        __is.readObject(e);
        __is.readPendingObjects();
        __inS.endReadParams();
        int __ret = __obj.save(e.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___elimina(TimeRecordManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.ETimeRecordCondivisoHolder e = new Condivisione.EntityCondivise.ETimeRecordCondivisoHolder();
        __is.readObject(e);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.elimina(e.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListTR(TimeRecordManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int idprogetto;
        int idsottoprogetto;
        int idtask;
        String dal;
        String al;
        String ultimi;
        boolean lavorativo;
        boolean nonlavorativo;
        String categoria;
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dip = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        idprogetto = __is.readInt();
        idsottoprogetto = __is.readInt();
        idtask = __is.readInt();
        dal = __is.readString();
        al = __is.readString();
        ultimi = __is.readString();
        lavorativo = __is.readBool();
        nonlavorativo = __is.readBool();
        categoria = __is.readString();
        __is.readObject(dip);
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.ETimeRecordCondiviso> __ret = __obj.getListTR(idprogetto, idsottoprogetto, idtask, dal, al, ultimi, lavorativo, nonlavorativo, categoria, dip.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaTRHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "elimina",
        "getListTR",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "save"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___elimina(this, in, __current);
            }
            case 1:
            {
                return ___getListTR(this, in, __current);
            }
            case 2:
            {
                return ___ice_id(this, in, __current);
            }
            case 3:
            {
                return ___ice_ids(this, in, __current);
            }
            case 4:
            {
                return ___ice_isA(this, in, __current);
            }
            case 5:
            {
                return ___ice_ping(this, in, __current);
            }
            case 6:
            {
                return ___save(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
