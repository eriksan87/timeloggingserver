// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public abstract class _AttivitaManagerDisp extends Ice.ObjectImpl implements AttivitaManager
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::AttivitaManager",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> getListProgetti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return getListProgetti(dipendente, abilitati, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getListSottoProgetti(int idprogetto, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente, boolean abilitati)
    {
        return getListSottoProgetti(idprogetto, dipendente, abilitati, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getListTask(int idsottoprogetto, boolean abilitati, Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return getListTask(idsottoprogetto, abilitati, dipendente, null);
    }

    public final Condivisione.EntityCondivise.EProgettoCondiviso getProgetto(Condivisione.EntityCondivise.EProgettoCondiviso progetto)
    {
        return getProgetto(progetto, null);
    }

    public final Condivisione.EntityCondivise.ESottoprogettoCondiviso getSottoprogetto(Condivisione.EntityCondivise.ESottoprogettoCondiviso sprogetto)
    {
        return getSottoprogetto(sprogetto, null);
    }

    public final Condivisione.EntityCondivise.ETaskCondiviso getTask(Condivisione.EntityCondivise.ETaskCondiviso task)
    {
        return getTask(task, null);
    }

    public final void saveAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa e)
    {
        saveAttivita(e, null);
    }

    public static Ice.DispatchStatus ___saveAttivita(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EAttivitaCondivisaHolder e = new Condivisione.EntityCondivise.EAttivitaCondivisaHolder();
        __is.readObject(e);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.saveAttivita(e.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getProgetto(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EProgettoCondivisoHolder progetto = new Condivisione.EntityCondivise.EProgettoCondivisoHolder();
        __is.readObject(progetto);
        __is.readPendingObjects();
        __inS.endReadParams();
        Condivisione.EntityCondivise.EProgettoCondiviso __ret = __obj.getProgetto(progetto.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getSottoprogetto(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.ESottoprogettoCondivisoHolder sprogetto = new Condivisione.EntityCondivise.ESottoprogettoCondivisoHolder();
        __is.readObject(sprogetto);
        __is.readPendingObjects();
        __inS.endReadParams();
        Condivisione.EntityCondivise.ESottoprogettoCondiviso __ret = __obj.getSottoprogetto(sprogetto.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getTask(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.ETaskCondivisoHolder task = new Condivisione.EntityCondivise.ETaskCondivisoHolder();
        __is.readObject(task);
        __is.readPendingObjects();
        __inS.endReadParams();
        Condivisione.EntityCondivise.ETaskCondiviso __ret = __obj.getTask(task.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListProgetti(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        boolean abilitati;
        __is.readObject(dipendente);
        abilitati = __is.readBool();
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.EProgettoCondiviso> __ret = __obj.getListProgetti(dipendente.value, abilitati, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaProgettiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListSottoProgetti(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int idprogetto;
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        boolean abilitati;
        idprogetto = __is.readInt();
        __is.readObject(dipendente);
        abilitati = __is.readBool();
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> __ret = __obj.getListSottoProgetti(idprogetto, dipendente.value, abilitati, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaSottoProgettiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListTask(AttivitaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int idsottoprogetto;
        boolean abilitati;
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        idsottoprogetto = __is.readInt();
        abilitati = __is.readBool();
        __is.readObject(dipendente);
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> __ret = __obj.getListTask(idsottoprogetto, abilitati, dipendente.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaTaskHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getListProgetti",
        "getListSottoProgetti",
        "getListTask",
        "getProgetto",
        "getSottoprogetto",
        "getTask",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "saveAttivita"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getListProgetti(this, in, __current);
            }
            case 1:
            {
                return ___getListSottoProgetti(this, in, __current);
            }
            case 2:
            {
                return ___getListTask(this, in, __current);
            }
            case 3:
            {
                return ___getProgetto(this, in, __current);
            }
            case 4:
            {
                return ___getSottoprogetto(this, in, __current);
            }
            case 5:
            {
                return ___getTask(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___saveAttivita(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
