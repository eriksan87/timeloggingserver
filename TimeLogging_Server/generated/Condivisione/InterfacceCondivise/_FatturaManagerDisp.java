// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public abstract class _FatturaManagerDisp extends Ice.ObjectImpl implements FatturaManager
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::FatturaManager",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final double getPercentualeGuadagno()
    {
        return getPercentualeGuadagno(null);
    }

    public final double getPercentualeScontoCliente()
    {
        return getPercentualeScontoCliente(null);
    }

    public final double getScontoSoglia()
    {
        return getScontoSoglia(null);
    }

    public final double getSoglia()
    {
        return getSoglia(null);
    }

    public final boolean nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente)
    {
        return nuovoCliente(cliente, null);
    }

    public final void setPercentualeGuadagno(double percentuale)
    {
        setPercentualeGuadagno(percentuale, null);
    }

    public final void setPercentualeScontoCliente(double percentuale)
    {
        setPercentualeScontoCliente(percentuale, null);
    }

    public final void setScontoSoglia(double scontosoglia)
    {
        setScontoSoglia(scontosoglia, null);
    }

    public final void setSoglia(double soglia)
    {
        setSoglia(soglia, null);
    }

    public static Ice.DispatchStatus ___getPercentualeGuadagno(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getPercentualeGuadagno(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getPercentualeScontoCliente(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getPercentualeScontoCliente(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getScontoSoglia(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getScontoSoglia(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getSoglia(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getSoglia(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setPercentualeGuadagno(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double percentuale;
        percentuale = __is.readDouble();
        __inS.endReadParams();
        __obj.setPercentualeGuadagno(percentuale, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setPercentualeScontoCliente(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double percentuale;
        percentuale = __is.readDouble();
        __inS.endReadParams();
        __obj.setPercentualeScontoCliente(percentuale, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setScontoSoglia(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double scontosoglia;
        scontosoglia = __is.readDouble();
        __inS.endReadParams();
        __obj.setScontoSoglia(scontosoglia, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setSoglia(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double soglia;
        soglia = __is.readDouble();
        __inS.endReadParams();
        __obj.setSoglia(soglia, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___nuovoCliente(FatturaManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EClienteCondivisoHolder cliente = new Condivisione.EntityCondivise.EClienteCondivisoHolder();
        __is.readObject(cliente);
        __is.readPendingObjects();
        __inS.endReadParams();
        boolean __ret = __obj.nuovoCliente(cliente.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getPercentualeGuadagno",
        "getPercentualeScontoCliente",
        "getScontoSoglia",
        "getSoglia",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "nuovoCliente",
        "setPercentualeGuadagno",
        "setPercentualeScontoCliente",
        "setScontoSoglia",
        "setSoglia"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getPercentualeGuadagno(this, in, __current);
            }
            case 1:
            {
                return ___getPercentualeScontoCliente(this, in, __current);
            }
            case 2:
            {
                return ___getScontoSoglia(this, in, __current);
            }
            case 3:
            {
                return ___getSoglia(this, in, __current);
            }
            case 4:
            {
                return ___ice_id(this, in, __current);
            }
            case 5:
            {
                return ___ice_ids(this, in, __current);
            }
            case 6:
            {
                return ___ice_isA(this, in, __current);
            }
            case 7:
            {
                return ___ice_ping(this, in, __current);
            }
            case 8:
            {
                return ___nuovoCliente(this, in, __current);
            }
            case 9:
            {
                return ___setPercentualeGuadagno(this, in, __current);
            }
            case 10:
            {
                return ___setPercentualeScontoCliente(this, in, __current);
            }
            case 11:
            {
                return ___setScontoSoglia(this, in, __current);
            }
            case 12:
            {
                return ___setSoglia(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
