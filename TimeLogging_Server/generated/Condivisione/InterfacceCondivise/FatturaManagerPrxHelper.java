// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public final class FatturaManagerPrxHelper extends Ice.ObjectPrxHelperBase implements FatturaManagerPrx
{
    private static final String __getPercentualeGuadagno_name = "getPercentualeGuadagno";

    public double getPercentualeGuadagno()
    {
        return getPercentualeGuadagno(null, false);
    }

    public double getPercentualeGuadagno(java.util.Map<String, String> __ctx)
    {
        return getPercentualeGuadagno(__ctx, true);
    }

    private double getPercentualeGuadagno(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPercentualeGuadagno", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPercentualeGuadagno");
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    return __del.getPercentualeGuadagno(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno()
    {
        return begin_getPercentualeGuadagno(null, false, null);
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno(java.util.Map<String, String> __ctx)
    {
        return begin_getPercentualeGuadagno(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno(Ice.Callback __cb)
    {
        return begin_getPercentualeGuadagno(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPercentualeGuadagno(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno(Callback_FatturaManager_getPercentualeGuadagno __cb)
    {
        return begin_getPercentualeGuadagno(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeGuadagno(java.util.Map<String, String> __ctx, Callback_FatturaManager_getPercentualeGuadagno __cb)
    {
        return begin_getPercentualeGuadagno(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPercentualeGuadagno(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPercentualeGuadagno_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPercentualeGuadagno_name, __cb);
        try
        {
            __result.__prepare(__getPercentualeGuadagno_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getPercentualeGuadagno(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPercentualeGuadagno_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPercentualeScontoCliente_name = "getPercentualeScontoCliente";

    public double getPercentualeScontoCliente()
    {
        return getPercentualeScontoCliente(null, false);
    }

    public double getPercentualeScontoCliente(java.util.Map<String, String> __ctx)
    {
        return getPercentualeScontoCliente(__ctx, true);
    }

    private double getPercentualeScontoCliente(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPercentualeScontoCliente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPercentualeScontoCliente");
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    return __del.getPercentualeScontoCliente(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente()
    {
        return begin_getPercentualeScontoCliente(null, false, null);
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente(java.util.Map<String, String> __ctx)
    {
        return begin_getPercentualeScontoCliente(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente(Ice.Callback __cb)
    {
        return begin_getPercentualeScontoCliente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPercentualeScontoCliente(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente(Callback_FatturaManager_getPercentualeScontoCliente __cb)
    {
        return begin_getPercentualeScontoCliente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPercentualeScontoCliente(java.util.Map<String, String> __ctx, Callback_FatturaManager_getPercentualeScontoCliente __cb)
    {
        return begin_getPercentualeScontoCliente(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPercentualeScontoCliente(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPercentualeScontoCliente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPercentualeScontoCliente_name, __cb);
        try
        {
            __result.__prepare(__getPercentualeScontoCliente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getPercentualeScontoCliente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPercentualeScontoCliente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getScontoSoglia_name = "getScontoSoglia";

    public double getScontoSoglia()
    {
        return getScontoSoglia(null, false);
    }

    public double getScontoSoglia(java.util.Map<String, String> __ctx)
    {
        return getScontoSoglia(__ctx, true);
    }

    private double getScontoSoglia(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScontoSoglia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScontoSoglia");
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    return __del.getScontoSoglia(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getScontoSoglia()
    {
        return begin_getScontoSoglia(null, false, null);
    }

    public Ice.AsyncResult begin_getScontoSoglia(java.util.Map<String, String> __ctx)
    {
        return begin_getScontoSoglia(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getScontoSoglia(Ice.Callback __cb)
    {
        return begin_getScontoSoglia(null, false, __cb);
    }

    public Ice.AsyncResult begin_getScontoSoglia(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScontoSoglia(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getScontoSoglia(Callback_FatturaManager_getScontoSoglia __cb)
    {
        return begin_getScontoSoglia(null, false, __cb);
    }

    public Ice.AsyncResult begin_getScontoSoglia(java.util.Map<String, String> __ctx, Callback_FatturaManager_getScontoSoglia __cb)
    {
        return begin_getScontoSoglia(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScontoSoglia(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScontoSoglia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScontoSoglia_name, __cb);
        try
        {
            __result.__prepare(__getScontoSoglia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getScontoSoglia(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScontoSoglia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getSoglia_name = "getSoglia";

    public double getSoglia()
    {
        return getSoglia(null, false);
    }

    public double getSoglia(java.util.Map<String, String> __ctx)
    {
        return getSoglia(__ctx, true);
    }

    private double getSoglia(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getSoglia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getSoglia");
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    return __del.getSoglia(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getSoglia()
    {
        return begin_getSoglia(null, false, null);
    }

    public Ice.AsyncResult begin_getSoglia(java.util.Map<String, String> __ctx)
    {
        return begin_getSoglia(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getSoglia(Ice.Callback __cb)
    {
        return begin_getSoglia(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSoglia(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSoglia(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getSoglia(Callback_FatturaManager_getSoglia __cb)
    {
        return begin_getSoglia(null, false, __cb);
    }

    public Ice.AsyncResult begin_getSoglia(java.util.Map<String, String> __ctx, Callback_FatturaManager_getSoglia __cb)
    {
        return begin_getSoglia(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSoglia(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSoglia_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSoglia_name, __cb);
        try
        {
            __result.__prepare(__getSoglia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getSoglia(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSoglia_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __nuovoCliente_name = "nuovoCliente";

    public boolean nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente)
    {
        return nuovoCliente(cliente, null, false);
    }

    public boolean nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx)
    {
        return nuovoCliente(cliente, __ctx, true);
    }

    private boolean nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "nuovoCliente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("nuovoCliente");
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    return __del.nuovoCliente(cliente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente)
    {
        return begin_nuovoCliente(cliente, null, false, null);
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx)
    {
        return begin_nuovoCliente(cliente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, Ice.Callback __cb)
    {
        return begin_nuovoCliente(cliente, null, false, __cb);
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_nuovoCliente(cliente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, Callback_FatturaManager_nuovoCliente __cb)
    {
        return begin_nuovoCliente(cliente, null, false, __cb);
    }

    public Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, Callback_FatturaManager_nuovoCliente __cb)
    {
        return begin_nuovoCliente(cliente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_nuovoCliente(Condivisione.EntityCondivise.EClienteCondiviso cliente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__nuovoCliente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __nuovoCliente_name, __cb);
        try
        {
            __result.__prepare(__nuovoCliente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(cliente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_nuovoCliente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __nuovoCliente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setPercentualeGuadagno_name = "setPercentualeGuadagno";

    public void setPercentualeGuadagno(double percentuale)
    {
        setPercentualeGuadagno(percentuale, null, false);
    }

    public void setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx)
    {
        setPercentualeGuadagno(percentuale, __ctx, true);
    }

    private void setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPercentualeGuadagno", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    __del.setPercentualeGuadagno(percentuale, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale)
    {
        return begin_setPercentualeGuadagno(percentuale, null, false, null);
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx)
    {
        return begin_setPercentualeGuadagno(percentuale, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, Ice.Callback __cb)
    {
        return begin_setPercentualeGuadagno(percentuale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPercentualeGuadagno(percentuale, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, Callback_FatturaManager_setPercentualeGuadagno __cb)
    {
        return begin_setPercentualeGuadagno(percentuale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx, Callback_FatturaManager_setPercentualeGuadagno __cb)
    {
        return begin_setPercentualeGuadagno(percentuale, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPercentualeGuadagno(double percentuale, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPercentualeGuadagno_name, __cb);
        try
        {
            __result.__prepare(__setPercentualeGuadagno_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(percentuale);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPercentualeGuadagno(Ice.AsyncResult __result)
    {
        __end(__result, __setPercentualeGuadagno_name);
    }

    private static final String __setPercentualeScontoCliente_name = "setPercentualeScontoCliente";

    public void setPercentualeScontoCliente(double percentuale)
    {
        setPercentualeScontoCliente(percentuale, null, false);
    }

    public void setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx)
    {
        setPercentualeScontoCliente(percentuale, __ctx, true);
    }

    private void setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPercentualeScontoCliente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    __del.setPercentualeScontoCliente(percentuale, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale)
    {
        return begin_setPercentualeScontoCliente(percentuale, null, false, null);
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx)
    {
        return begin_setPercentualeScontoCliente(percentuale, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, Ice.Callback __cb)
    {
        return begin_setPercentualeScontoCliente(percentuale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPercentualeScontoCliente(percentuale, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, Callback_FatturaManager_setPercentualeScontoCliente __cb)
    {
        return begin_setPercentualeScontoCliente(percentuale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx, Callback_FatturaManager_setPercentualeScontoCliente __cb)
    {
        return begin_setPercentualeScontoCliente(percentuale, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPercentualeScontoCliente(double percentuale, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPercentualeScontoCliente_name, __cb);
        try
        {
            __result.__prepare(__setPercentualeScontoCliente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(percentuale);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPercentualeScontoCliente(Ice.AsyncResult __result)
    {
        __end(__result, __setPercentualeScontoCliente_name);
    }

    private static final String __setScontoSoglia_name = "setScontoSoglia";

    public void setScontoSoglia(double scontosoglia)
    {
        setScontoSoglia(scontosoglia, null, false);
    }

    public void setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx)
    {
        setScontoSoglia(scontosoglia, __ctx, true);
    }

    private void setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setScontoSoglia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    __del.setScontoSoglia(scontosoglia, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia)
    {
        return begin_setScontoSoglia(scontosoglia, null, false, null);
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx)
    {
        return begin_setScontoSoglia(scontosoglia, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, Ice.Callback __cb)
    {
        return begin_setScontoSoglia(scontosoglia, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScontoSoglia(scontosoglia, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, Callback_FatturaManager_setScontoSoglia __cb)
    {
        return begin_setScontoSoglia(scontosoglia, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx, Callback_FatturaManager_setScontoSoglia __cb)
    {
        return begin_setScontoSoglia(scontosoglia, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScontoSoglia(double scontosoglia, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScontoSoglia_name, __cb);
        try
        {
            __result.__prepare(__setScontoSoglia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(scontosoglia);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setScontoSoglia(Ice.AsyncResult __result)
    {
        __end(__result, __setScontoSoglia_name);
    }

    private static final String __setSoglia_name = "setSoglia";

    public void setSoglia(double soglia)
    {
        setSoglia(soglia, null, false);
    }

    public void setSoglia(double soglia, java.util.Map<String, String> __ctx)
    {
        setSoglia(soglia, __ctx, true);
    }

    private void setSoglia(double soglia, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setSoglia", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _FatturaManagerDel __del = (_FatturaManagerDel)__delBase;
                    __del.setSoglia(soglia, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setSoglia(double soglia)
    {
        return begin_setSoglia(soglia, null, false, null);
    }

    public Ice.AsyncResult begin_setSoglia(double soglia, java.util.Map<String, String> __ctx)
    {
        return begin_setSoglia(soglia, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setSoglia(double soglia, Ice.Callback __cb)
    {
        return begin_setSoglia(soglia, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSoglia(double soglia, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setSoglia(soglia, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setSoglia(double soglia, Callback_FatturaManager_setSoglia __cb)
    {
        return begin_setSoglia(soglia, null, false, __cb);
    }

    public Ice.AsyncResult begin_setSoglia(double soglia, java.util.Map<String, String> __ctx, Callback_FatturaManager_setSoglia __cb)
    {
        return begin_setSoglia(soglia, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setSoglia(double soglia, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setSoglia_name, __cb);
        try
        {
            __result.__prepare(__setSoglia_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(soglia);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setSoglia(Ice.AsyncResult __result)
    {
        __end(__result, __setSoglia_name);
    }

    public static FatturaManagerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FatturaManagerPrx)
            {
                __d = (FatturaManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FatturaManagerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FatturaManagerPrx)
            {
                __d = (FatturaManagerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static FatturaManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FatturaManagerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static FatturaManagerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof FatturaManagerPrx)
            {
                __d = (FatturaManagerPrx)__obj;
            }
            else
            {
                FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static FatturaManagerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        FatturaManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            FatturaManagerPrxHelper __h = new FatturaManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::FatturaManager",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _FatturaManagerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _FatturaManagerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, FatturaManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static FatturaManagerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            FatturaManagerPrxHelper result = new FatturaManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
