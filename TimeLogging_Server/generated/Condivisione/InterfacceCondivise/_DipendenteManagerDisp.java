// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.InterfacceCondivise;

public abstract class _DipendenteManagerDisp extends Ice.ObjectImpl implements DipendenteManager
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Condivisione::InterfacceCondivise::DipendenteManager",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final int UpdateDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return UpdateDipendente(dipendente, null);
    }

    public final void createDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        createDipendente(dipendente, null);
    }

    public final int deleteDipendente(Condivisione.EntityCondivise.EDipendenteCondiviso dipentente)
    {
        return deleteDipendente(dipentente, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListAllDipendenti()
    {
        return getListAllDipendenti(null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> getListConsulenti(Condivisione.EntityCondivise.EDipendenteCondiviso dipendente)
    {
        return getListConsulenti(dipendente, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> getListDipendentiAttivita(Condivisione.EntityCondivise.EAttivitaCondivisa progetto)
    {
        return getListDipendentiAttivita(progetto, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> getListManager()
    {
        return getListManager(null);
    }

    public static Ice.DispatchStatus ___createDipendente(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        __is.readObject(dipendente);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.createDipendente(dipendente.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___UpdateDipendente(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        __is.readObject(dipendente);
        __is.readPendingObjects();
        __inS.endReadParams();
        int __ret = __obj.UpdateDipendente(dipendente.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___deleteDipendente(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipentente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        __is.readObject(dipentente);
        __is.readPendingObjects();
        __inS.endReadParams();
        int __ret = __obj.deleteDipendente(dipentente.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeInt(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListConsulenti(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EDipendenteCondivisoHolder dipendente = new Condivisione.EntityCondivise.EDipendenteCondivisoHolder();
        __is.readObject(dipendente);
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.EConsulenteCondiviso> __ret = __obj.getListConsulenti(dipendente.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaConsulentiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListManager(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.util.ArrayList<Condivisione.EntityCondivise.EManagerCondiviso> __ret = __obj.getListManager(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaManagerHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListDipendentiAttivita(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Condivisione.EntityCondivise.EAttivitaCondivisaHolder progetto = new Condivisione.EntityCondivise.EAttivitaCondivisaHolder();
        __is.readObject(progetto);
        __is.readPendingObjects();
        __inS.endReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> __ret = __obj.getListDipendentiAttivita(progetto.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaDipendentiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListAllDipendenti(DipendenteManager __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.util.ArrayList<Condivisione.EntityCondivise.EDipendenteCondiviso> __ret = __obj.getListAllDipendenti(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        Condivisione.EntityCondivise.listaDipendentiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "UpdateDipendente",
        "createDipendente",
        "deleteDipendente",
        "getListAllDipendenti",
        "getListConsulenti",
        "getListDipendentiAttivita",
        "getListManager",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___UpdateDipendente(this, in, __current);
            }
            case 1:
            {
                return ___createDipendente(this, in, __current);
            }
            case 2:
            {
                return ___deleteDipendente(this, in, __current);
            }
            case 3:
            {
                return ___getListAllDipendenti(this, in, __current);
            }
            case 4:
            {
                return ___getListConsulenti(this, in, __current);
            }
            case 5:
            {
                return ___getListDipendentiAttivita(this, in, __current);
            }
            case 6:
            {
                return ___getListManager(this, in, __current);
            }
            case 7:
            {
                return ___ice_id(this, in, __current);
            }
            case 8:
            {
                return ___ice_ids(this, in, __current);
            }
            case 9:
            {
                return ___ice_isA(this, in, __current);
            }
            case 10:
            {
                return ___ice_ping(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
