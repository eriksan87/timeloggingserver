// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public abstract class EProgettoCondiviso extends EAttivitaCondivisa
                                         implements _EProgettoCondivisoOperations,
                                                    _EProgettoCondivisoOperationsNC
{
    public EProgettoCondiviso()
    {
        super();
    }

    public EProgettoCondiviso(int id, String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso dipendente, EAttivitaCondivisa padre, double costo, EClienteCondiviso cliente, java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> listSp, java.sql.Timestamp[] proroga)
    {
        super(id, titolo, descrizione, budget, inizio, scadenza, dipendente, padre, costo);
        this.cliente = cliente;
        this.listSp = listSp;
        this.proroga = proroga;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::EAttivitaCondivisa",
        "::Condivisione::EntityCondivise::EProgettoCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final ESottoprogettoCondiviso aggiungiSottoprogetto(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso manager)
    {
        return aggiungiSottoprogetto(titolo, descrizione, budget, inizio, scadenza, manager, null);
    }

    public final EClienteCondiviso getEClienteCondiviso()
    {
        return getEClienteCondiviso(null);
    }

    public final java.sql.Timestamp[] getProroghe()
    {
        return getProroghe(null);
    }

    public final ESottoprogettoCondiviso getSp(String titolo)
    {
        return getSp(titolo, null);
    }

    public final java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> getlistSp()
    {
        return getlistSp(null);
    }

    public final void setEClienteCondiviso(EClienteCondiviso cliente)
    {
        setEClienteCondiviso(cliente, null);
    }

    public final void setProroghe(java.sql.Timestamp[] p)
    {
        setProroghe(p, null);
    }

    public final void setlistSp(java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> listSp)
    {
        setlistSp(listSp, null);
    }

    public static Ice.DispatchStatus ___getProroghe(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.sql.Timestamp[] __ret = __obj.getProroghe(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        prorogheHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setProroghe(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.sql.Timestamp[] p;
        p = prorogheHelper.read(__is);
        __inS.endReadParams();
        __obj.setProroghe(p, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setEClienteCondiviso(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        EClienteCondivisoHolder cliente = new EClienteCondivisoHolder();
        __is.readObject(cliente);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setEClienteCondiviso(cliente.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___aggiungiSottoprogetto(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titolo;
        String descrizione;
        double budget;
        java.sql.Timestamp inizio;
        java.sql.Timestamp scadenza;
        EDipendenteCondivisoHolder manager = new EDipendenteCondivisoHolder();
        titolo = __is.readString();
        descrizione = __is.readString();
        budget = __is.readDouble();
        inizio = (java.sql.Timestamp)__is.readSerializable();
        scadenza = (java.sql.Timestamp)__is.readSerializable();
        __is.readObject(manager);
        __is.readPendingObjects();
        __inS.endReadParams();
        ESottoprogettoCondiviso __ret = __obj.aggiungiSottoprogetto(titolo, descrizione, budget, inizio, scadenza, manager.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getEClienteCondiviso(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        EClienteCondiviso __ret = __obj.getEClienteCondiviso(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setlistSp(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> listSp;
        listSp = listaSottoProgettiHelper.read(__is);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setlistSp(listSp, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getlistSp(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> __ret = __obj.getlistSp(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        listaSottoProgettiHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getSp(EProgettoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String titolo;
        titolo = __is.readString();
        __inS.endReadParams();
        ESottoprogettoCondiviso __ret = __obj.getSp(titolo, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "aggiungiSottoprogetto",
        "elaboraCosti",
        "getBudget",
        "getCosto",
        "getDescrizione",
        "getDipendente",
        "getEClienteCondiviso",
        "getId",
        "getInizio",
        "getPadre",
        "getProroghe",
        "getScadenza",
        "getSp",
        "getTitolo",
        "getlistSp",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setBudget",
        "setCosto",
        "setDescrizione",
        "setDipendente",
        "setEClienteCondiviso",
        "setId",
        "setInizio",
        "setPadre",
        "setProroghe",
        "setScadenza",
        "setTitolo",
        "setlistSp"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___aggiungiSottoprogetto(this, in, __current);
            }
            case 1:
            {
                return EAttivitaCondivisa.___elaboraCosti(this, in, __current);
            }
            case 2:
            {
                return EAttivitaCondivisa.___getBudget(this, in, __current);
            }
            case 3:
            {
                return EAttivitaCondivisa.___getCosto(this, in, __current);
            }
            case 4:
            {
                return EAttivitaCondivisa.___getDescrizione(this, in, __current);
            }
            case 5:
            {
                return EAttivitaCondivisa.___getDipendente(this, in, __current);
            }
            case 6:
            {
                return ___getEClienteCondiviso(this, in, __current);
            }
            case 7:
            {
                return EAttivitaCondivisa.___getId(this, in, __current);
            }
            case 8:
            {
                return EAttivitaCondivisa.___getInizio(this, in, __current);
            }
            case 9:
            {
                return EAttivitaCondivisa.___getPadre(this, in, __current);
            }
            case 10:
            {
                return ___getProroghe(this, in, __current);
            }
            case 11:
            {
                return EAttivitaCondivisa.___getScadenza(this, in, __current);
            }
            case 12:
            {
                return ___getSp(this, in, __current);
            }
            case 13:
            {
                return EAttivitaCondivisa.___getTitolo(this, in, __current);
            }
            case 14:
            {
                return ___getlistSp(this, in, __current);
            }
            case 15:
            {
                return ___ice_id(this, in, __current);
            }
            case 16:
            {
                return ___ice_ids(this, in, __current);
            }
            case 17:
            {
                return ___ice_isA(this, in, __current);
            }
            case 18:
            {
                return ___ice_ping(this, in, __current);
            }
            case 19:
            {
                return EAttivitaCondivisa.___setBudget(this, in, __current);
            }
            case 20:
            {
                return EAttivitaCondivisa.___setCosto(this, in, __current);
            }
            case 21:
            {
                return EAttivitaCondivisa.___setDescrizione(this, in, __current);
            }
            case 22:
            {
                return EAttivitaCondivisa.___setDipendente(this, in, __current);
            }
            case 23:
            {
                return ___setEClienteCondiviso(this, in, __current);
            }
            case 24:
            {
                return EAttivitaCondivisa.___setId(this, in, __current);
            }
            case 25:
            {
                return EAttivitaCondivisa.___setInizio(this, in, __current);
            }
            case 26:
            {
                return EAttivitaCondivisa.___setPadre(this, in, __current);
            }
            case 27:
            {
                return ___setProroghe(this, in, __current);
            }
            case 28:
            {
                return EAttivitaCondivisa.___setScadenza(this, in, __current);
            }
            case 29:
            {
                return EAttivitaCondivisa.___setTitolo(this, in, __current);
            }
            case 30:
            {
                return ___setlistSp(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeObject(cliente);
        listaSottoProgettiHelper.write(__os, listSp);
        prorogheHelper.write(__os, proroga);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    private class Patcher implements IceInternal.Patcher
    {
        Patcher(int member)
        {
            __member = member;
        }

        public void
        patch(Ice.Object v)
        {
            switch(__member)
            {
            case 0:
                __typeId = "::Condivisione::EntityCondivise::EDipendenteCondiviso";
                if(v == null || v instanceof EDipendenteCondiviso)
                {
                    dipendente = (EDipendenteCondiviso)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 1:
                __typeId = "::Condivisione::EntityCondivise::EAttivitaCondivisa";
                if(v == null || v instanceof EAttivitaCondivisa)
                {
                    padre = (EAttivitaCondivisa)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 2:
                __typeId = "::Condivisione::EntityCondivise::EClienteCondiviso";
                if(v == null || v instanceof EClienteCondiviso)
                {
                    cliente = (EClienteCondiviso)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            }
        }

        public String
        type()
        {
            return __typeId;
        }

        private int __member;
        private String __typeId;
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.readObject(new Patcher(2));
        listSp = listaSottoProgettiHelper.read(__is);
        proroga = prorogheHelper.read(__is);
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public EClienteCondiviso cliente;

    public java.util.ArrayList<Condivisione.EntityCondivise.ESottoprogettoCondiviso> listSp;

    public java.sql.Timestamp[] proroga;

    public static final long serialVersionUID = -773343759L;
}
