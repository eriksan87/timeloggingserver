// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public final class ETariffaCondivisaPrxHelper extends Ice.ObjectPrxHelperBase implements ETariffaCondivisaPrx
{
    private static final String __getFine_name = "getFine";

    public java.sql.Timestamp getFine()
    {
        return getFine(null, false);
    }

    public java.sql.Timestamp getFine(java.util.Map<String, String> __ctx)
    {
        return getFine(__ctx, true);
    }

    private java.sql.Timestamp getFine(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFine", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFine");
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    return __del.getFine(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFine()
    {
        return begin_getFine(null, false, null);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx)
    {
        return begin_getFine(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFine(Ice.Callback __cb)
    {
        return begin_getFine(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFine(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFine(Callback_ETariffaCondivisa_getFine __cb)
    {
        return begin_getFine(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_getFine __cb)
    {
        return begin_getFine(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFine_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFine_name, __cb);
        try
        {
            __result.__prepare(__getFine_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getFine(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFine_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getId_name = "getId";

    public int getId()
    {
        return getId(null, false);
    }

    public int getId(java.util.Map<String, String> __ctx)
    {
        return getId(__ctx, true);
    }

    private int getId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getId");
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    return __del.getId(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getId()
    {
        return begin_getId(null, false, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx)
    {
        return begin_getId(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getId(Ice.Callback __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getId(Callback_ETariffaCondivisa_getId __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_getId __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getId_name, __cb);
        try
        {
            __result.__prepare(__getId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getImporto_name = "getImporto";

    public double getImporto()
    {
        return getImporto(null, false);
    }

    public double getImporto(java.util.Map<String, String> __ctx)
    {
        return getImporto(__ctx, true);
    }

    private double getImporto(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getImporto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getImporto");
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    return __del.getImporto(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getImporto()
    {
        return begin_getImporto(null, false, null);
    }

    public Ice.AsyncResult begin_getImporto(java.util.Map<String, String> __ctx)
    {
        return begin_getImporto(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getImporto(Ice.Callback __cb)
    {
        return begin_getImporto(null, false, __cb);
    }

    public Ice.AsyncResult begin_getImporto(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getImporto(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getImporto(Callback_ETariffaCondivisa_getImporto __cb)
    {
        return begin_getImporto(null, false, __cb);
    }

    public Ice.AsyncResult begin_getImporto(java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_getImporto __cb)
    {
        return begin_getImporto(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getImporto(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getImporto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getImporto_name, __cb);
        try
        {
            __result.__prepare(__getImporto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getImporto(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getImporto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getInizio_name = "getInizio";

    public java.sql.Timestamp getInizio()
    {
        return getInizio(null, false);
    }

    public java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx)
    {
        return getInizio(__ctx, true);
    }

    private java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInizio");
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    return __del.getInizio(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getInizio()
    {
        return begin_getInizio(null, false, null);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx)
    {
        return begin_getInizio(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getInizio(Ice.Callback __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInizio(Callback_ETariffaCondivisa_getInizio __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_getInizio __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInizio_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInizio_name, __cb);
        try
        {
            __result.__prepare(__getInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getInizio(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInizio_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setId_name = "setId";

    public void setId(int id)
    {
        setId(id, null, false);
    }

    public void setId(int id, java.util.Map<String, String> __ctx)
    {
        setId(id, __ctx, true);
    }

    private void setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    __del.setId(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setId(int id)
    {
        return begin_setId(id, null, false, null);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx)
    {
        return begin_setId(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setId(int id, Ice.Callback __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, Callback_ETariffaCondivisa_setId __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_setId __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setId_name, __cb);
        try
        {
            __result.__prepare(__setId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setId(Ice.AsyncResult __result)
    {
        __end(__result, __setId_name);
    }

    private static final String __setImporto_name = "setImporto";

    public void setImporto(double importo)
    {
        setImporto(importo, null, false);
    }

    public void setImporto(double importo, java.util.Map<String, String> __ctx)
    {
        setImporto(importo, __ctx, true);
    }

    private void setImporto(double importo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setImporto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    __del.setImporto(importo, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setImporto(double importo)
    {
        return begin_setImporto(importo, null, false, null);
    }

    public Ice.AsyncResult begin_setImporto(double importo, java.util.Map<String, String> __ctx)
    {
        return begin_setImporto(importo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setImporto(double importo, Ice.Callback __cb)
    {
        return begin_setImporto(importo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setImporto(double importo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setImporto(importo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setImporto(double importo, Callback_ETariffaCondivisa_setImporto __cb)
    {
        return begin_setImporto(importo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setImporto(double importo, java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_setImporto __cb)
    {
        return begin_setImporto(importo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setImporto(double importo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setImporto_name, __cb);
        try
        {
            __result.__prepare(__setImporto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(importo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setImporto(Ice.AsyncResult __result)
    {
        __end(__result, __setImporto_name);
    }

    private static final String __setInizio_name = "setInizio";

    public void setInizio(java.sql.Timestamp inizio)
    {
        setInizio(inizio, null, false);
    }

    public void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        setInizio(inizio, __ctx, true);
    }

    private void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    __del.setInizio(inizio, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio)
    {
        return begin_setInizio(inizio, null, false, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        return begin_setInizio(inizio, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Callback_ETariffaCondivisa_setInizio __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_setInizio __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setInizio_name, __cb);
        try
        {
            __result.__prepare(__setInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(inizio);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setInizio(Ice.AsyncResult __result)
    {
        __end(__result, __setInizio_name);
    }

    private static final String __setScadenza_name = "setScadenza";

    public void setScadenza(java.sql.Timestamp scadenza)
    {
        setScadenza(scadenza, null, false);
    }

    public void setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx)
    {
        setScadenza(scadenza, __ctx, true);
    }

    private void setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setScadenza", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETariffaCondivisaDel __del = (_ETariffaCondivisaDel)__delBase;
                    __del.setScadenza(scadenza, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza)
    {
        return begin_setScadenza(scadenza, null, false, null);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx)
    {
        return begin_setScadenza(scadenza, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, Ice.Callback __cb)
    {
        return begin_setScadenza(scadenza, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScadenza(scadenza, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, Callback_ETariffaCondivisa_setScadenza __cb)
    {
        return begin_setScadenza(scadenza, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, Callback_ETariffaCondivisa_setScadenza __cb)
    {
        return begin_setScadenza(scadenza, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScadenza_name, __cb);
        try
        {
            __result.__prepare(__setScadenza_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(scadenza);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setScadenza(Ice.AsyncResult __result)
    {
        __end(__result, __setScadenza_name);
    }

    public static ETariffaCondivisaPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETariffaCondivisaPrx)
            {
                __d = (ETariffaCondivisaPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ETariffaCondivisaPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETariffaCondivisaPrx)
            {
                __d = (ETariffaCondivisaPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ETariffaCondivisaPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ETariffaCondivisaPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ETariffaCondivisaPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETariffaCondivisaPrx)
            {
                __d = (ETariffaCondivisaPrx)__obj;
            }
            else
            {
                ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ETariffaCondivisaPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ETariffaCondivisaPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ETariffaCondivisaPrxHelper __h = new ETariffaCondivisaPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::ETariffaCondivisa",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ETariffaCondivisaDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ETariffaCondivisaDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ETariffaCondivisaPrx v)
    {
        __os.writeProxy(v);
    }

    public static ETariffaCondivisaPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ETariffaCondivisaPrxHelper result = new ETariffaCondivisaPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
