// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public abstract class ETimeRecordLavorativoCondiviso extends ETimeRecordCondiviso
                                                     implements _ETimeRecordLavorativoCondivisoOperations,
                                                                _ETimeRecordLavorativoCondivisoOperationsNC
{
    public ETimeRecordLavorativoCondiviso()
    {
        super();
    }

    public ETimeRecordLavorativoCondiviso(int id, String commento, java.sql.Timestamp inizio, java.sql.Timestamp fine, EConsulenteCondiviso consulente, ETaskCondiviso task, double costo)
    {
        super(id, commento, inizio, fine, consulente);
        this.task = task;
        this.costo = costo;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::ETimeRecordCondiviso",
        "::Condivisione::EntityCondivise::ETimeRecordLavorativoCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final double calcolaCosto(java.util.ArrayList<ETariffaCondivisa> tariffe)
    {
        return calcolaCosto(tariffe, null);
    }

    public final double getCosto()
    {
        return getCosto(null);
    }

    public final ETaskCondiviso getETaskCondiviso()
    {
        return getETaskCondiviso(null);
    }

    public final void setCosto(double costo)
    {
        setCosto(costo, null);
    }

    public final void setETaskCondiviso(ETaskCondiviso task)
    {
        setETaskCondiviso(task, null);
    }

    public static Ice.DispatchStatus ___setCosto(ETimeRecordLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        double costo;
        costo = __is.readDouble();
        __inS.endReadParams();
        __obj.setCosto(costo, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getCosto(ETimeRecordLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        double __ret = __obj.getCosto(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setETaskCondiviso(ETimeRecordLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        ETaskCondivisoHolder task = new ETaskCondivisoHolder();
        __is.readObject(task);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setETaskCondiviso(task.value, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getETaskCondiviso(ETimeRecordLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        ETaskCondiviso __ret = __obj.getETaskCondiviso(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___calcolaCosto(ETimeRecordLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.ArrayList<ETariffaCondivisa> tariffe;
        tariffe = listTariffeHelper.read(__is);
        __is.readPendingObjects();
        __inS.endReadParams();
        double __ret = __obj.calcolaCosto(tariffe, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeDouble(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "calcolaCosto",
        "getCommento",
        "getConsulente",
        "getCosto",
        "getETaskCondiviso",
        "getFine",
        "getId",
        "getInizio",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setCommento",
        "setConsulente",
        "setCosto",
        "setETaskCondiviso",
        "setFine",
        "setId",
        "setInizio"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___calcolaCosto(this, in, __current);
            }
            case 1:
            {
                return ETimeRecordCondiviso.___getCommento(this, in, __current);
            }
            case 2:
            {
                return ETimeRecordCondiviso.___getConsulente(this, in, __current);
            }
            case 3:
            {
                return ___getCosto(this, in, __current);
            }
            case 4:
            {
                return ___getETaskCondiviso(this, in, __current);
            }
            case 5:
            {
                return ETimeRecordCondiviso.___getFine(this, in, __current);
            }
            case 6:
            {
                return ETimeRecordCondiviso.___getId(this, in, __current);
            }
            case 7:
            {
                return ETimeRecordCondiviso.___getInizio(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ETimeRecordCondiviso.___setCommento(this, in, __current);
            }
            case 13:
            {
                return ETimeRecordCondiviso.___setConsulente(this, in, __current);
            }
            case 14:
            {
                return ___setCosto(this, in, __current);
            }
            case 15:
            {
                return ___setETaskCondiviso(this, in, __current);
            }
            case 16:
            {
                return ETimeRecordCondiviso.___setFine(this, in, __current);
            }
            case 17:
            {
                return ETimeRecordCondiviso.___setId(this, in, __current);
            }
            case 18:
            {
                return ETimeRecordCondiviso.___setInizio(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeObject(task);
        __os.writeDouble(costo);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    private class Patcher implements IceInternal.Patcher
    {
        Patcher(int member)
        {
            __member = member;
        }

        public void
        patch(Ice.Object v)
        {
            switch(__member)
            {
            case 0:
                __typeId = "::Condivisione::EntityCondivise::EConsulenteCondiviso";
                if(v == null || v instanceof EConsulenteCondiviso)
                {
                    consulente = (EConsulenteCondiviso)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 1:
                __typeId = "::Condivisione::EntityCondivise::ETaskCondiviso";
                if(v == null || v instanceof ETaskCondiviso)
                {
                    task = (ETaskCondiviso)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            }
        }

        public String
        type()
        {
            return __typeId;
        }

        private int __member;
        private String __typeId;
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.readObject(new Patcher(1));
        costo = __is.readDouble();
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public ETaskCondiviso task;

    public double costo;

    public static final long serialVersionUID = -603773797L;
}
