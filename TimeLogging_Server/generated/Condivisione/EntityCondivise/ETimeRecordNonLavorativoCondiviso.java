// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public abstract class ETimeRecordNonLavorativoCondiviso extends ETimeRecordCondiviso
                                                        implements _ETimeRecordNonLavorativoCondivisoOperations,
                                                                   _ETimeRecordNonLavorativoCondivisoOperationsNC
{
    public ETimeRecordNonLavorativoCondiviso()
    {
        super();
    }

    public ETimeRecordNonLavorativoCondiviso(int id, String commento, java.sql.Timestamp inizio, java.sql.Timestamp fine, EConsulenteCondiviso consulente, String categoria)
    {
        super(id, commento, inizio, fine, consulente);
        this.categoria = categoria;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::ETimeRecordCondiviso",
        "::Condivisione::EntityCondivise::ETimeRecordNonLavorativoCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final String getCategoria()
    {
        return getCategoria(null);
    }

    public final void setCategoria(String categoria)
    {
        setCategoria(categoria, null);
    }

    public static Ice.DispatchStatus ___setCategoria(ETimeRecordNonLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String categoria;
        categoria = __is.readString();
        __inS.endReadParams();
        __obj.setCategoria(categoria, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getCategoria(ETimeRecordNonLavorativoCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getCategoria(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "getCategoria",
        "getCommento",
        "getConsulente",
        "getFine",
        "getId",
        "getInizio",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setCategoria",
        "setCommento",
        "setConsulente",
        "setFine",
        "setId",
        "setInizio"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___getCategoria(this, in, __current);
            }
            case 1:
            {
                return ETimeRecordCondiviso.___getCommento(this, in, __current);
            }
            case 2:
            {
                return ETimeRecordCondiviso.___getConsulente(this, in, __current);
            }
            case 3:
            {
                return ETimeRecordCondiviso.___getFine(this, in, __current);
            }
            case 4:
            {
                return ETimeRecordCondiviso.___getId(this, in, __current);
            }
            case 5:
            {
                return ETimeRecordCondiviso.___getInizio(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___setCategoria(this, in, __current);
            }
            case 11:
            {
                return ETimeRecordCondiviso.___setCommento(this, in, __current);
            }
            case 12:
            {
                return ETimeRecordCondiviso.___setConsulente(this, in, __current);
            }
            case 13:
            {
                return ETimeRecordCondiviso.___setFine(this, in, __current);
            }
            case 14:
            {
                return ETimeRecordCondiviso.___setId(this, in, __current);
            }
            case 15:
            {
                return ETimeRecordCondiviso.___setInizio(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeString(categoria);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    private class Patcher implements IceInternal.Patcher
    {
        public void
        patch(Ice.Object v)
        {
            if(v == null || v instanceof EConsulenteCondiviso)
            {
                consulente = (EConsulenteCondiviso)v;
            }
            else
            {
                IceInternal.Ex.throwUOE(type(), v);
            }
        }

        public String
        type()
        {
            return "::Condivisione::EntityCondivise::EConsulenteCondiviso";
        }
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        categoria = __is.readString();
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public String categoria;

    public static final long serialVersionUID = -1998111045L;
}
