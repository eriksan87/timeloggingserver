// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public final class ESottoprogettoCondivisoPrxHelper extends Ice.ObjectPrxHelperBase implements ESottoprogettoCondivisoPrx
{
    private static final String __elaboraCosti_name = "elaboraCosti";

    public double elaboraCosti()
    {
        return elaboraCosti(null, false);
    }

    public double elaboraCosti(java.util.Map<String, String> __ctx)
    {
        return elaboraCosti(__ctx, true);
    }

    private double elaboraCosti(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "elaboraCosti", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("elaboraCosti");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.elaboraCosti(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_elaboraCosti()
    {
        return begin_elaboraCosti(null, false, null);
    }

    public Ice.AsyncResult begin_elaboraCosti(java.util.Map<String, String> __ctx)
    {
        return begin_elaboraCosti(__ctx, true, null);
    }

    public Ice.AsyncResult begin_elaboraCosti(Ice.Callback __cb)
    {
        return begin_elaboraCosti(null, false, __cb);
    }

    public Ice.AsyncResult begin_elaboraCosti(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_elaboraCosti(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_elaboraCosti(Callback_EAttivitaCondivisa_elaboraCosti __cb)
    {
        return begin_elaboraCosti(null, false, __cb);
    }

    public Ice.AsyncResult begin_elaboraCosti(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_elaboraCosti __cb)
    {
        return begin_elaboraCosti(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_elaboraCosti(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__elaboraCosti_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __elaboraCosti_name, __cb);
        try
        {
            __result.__prepare(__elaboraCosti_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_elaboraCosti(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __elaboraCosti_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getBudget_name = "getBudget";

    public double getBudget()
    {
        return getBudget(null, false);
    }

    public double getBudget(java.util.Map<String, String> __ctx)
    {
        return getBudget(__ctx, true);
    }

    private double getBudget(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBudget", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBudget");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getBudget(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBudget()
    {
        return begin_getBudget(null, false, null);
    }

    public Ice.AsyncResult begin_getBudget(java.util.Map<String, String> __ctx)
    {
        return begin_getBudget(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getBudget(Ice.Callback __cb)
    {
        return begin_getBudget(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBudget(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBudget(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBudget(Callback_EAttivitaCondivisa_getBudget __cb)
    {
        return begin_getBudget(null, false, __cb);
    }

    public Ice.AsyncResult begin_getBudget(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getBudget __cb)
    {
        return begin_getBudget(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBudget(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBudget_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBudget_name, __cb);
        try
        {
            __result.__prepare(__getBudget_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getBudget(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBudget_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCosto_name = "getCosto";

    public double getCosto()
    {
        return getCosto(null, false);
    }

    public double getCosto(java.util.Map<String, String> __ctx)
    {
        return getCosto(__ctx, true);
    }

    private double getCosto(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCosto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCosto");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getCosto(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCosto()
    {
        return begin_getCosto(null, false, null);
    }

    public Ice.AsyncResult begin_getCosto(java.util.Map<String, String> __ctx)
    {
        return begin_getCosto(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCosto(Ice.Callback __cb)
    {
        return begin_getCosto(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCosto(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCosto(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCosto(Callback_EAttivitaCondivisa_getCosto __cb)
    {
        return begin_getCosto(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCosto(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getCosto __cb)
    {
        return begin_getCosto(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCosto(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCosto_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCosto_name, __cb);
        try
        {
            __result.__prepare(__getCosto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getCosto(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCosto_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDescrizione_name = "getDescrizione";

    public String getDescrizione()
    {
        return getDescrizione(null, false);
    }

    public String getDescrizione(java.util.Map<String, String> __ctx)
    {
        return getDescrizione(__ctx, true);
    }

    private String getDescrizione(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDescrizione", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDescrizione");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getDescrizione(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDescrizione()
    {
        return begin_getDescrizione(null, false, null);
    }

    public Ice.AsyncResult begin_getDescrizione(java.util.Map<String, String> __ctx)
    {
        return begin_getDescrizione(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDescrizione(Ice.Callback __cb)
    {
        return begin_getDescrizione(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDescrizione(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDescrizione(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDescrizione(Callback_EAttivitaCondivisa_getDescrizione __cb)
    {
        return begin_getDescrizione(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDescrizione(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getDescrizione __cb)
    {
        return begin_getDescrizione(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDescrizione(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDescrizione_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDescrizione_name, __cb);
        try
        {
            __result.__prepare(__getDescrizione_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getDescrizione(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDescrizione_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getDipendente_name = "getDipendente";

    public EDipendenteCondiviso getDipendente()
    {
        return getDipendente(null, false);
    }

    public EDipendenteCondiviso getDipendente(java.util.Map<String, String> __ctx)
    {
        return getDipendente(__ctx, true);
    }

    private EDipendenteCondiviso getDipendente(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getDipendente");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getDipendente(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getDipendente()
    {
        return begin_getDipendente(null, false, null);
    }

    public Ice.AsyncResult begin_getDipendente(java.util.Map<String, String> __ctx)
    {
        return begin_getDipendente(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDipendente(Ice.Callback __cb)
    {
        return begin_getDipendente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDipendente(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDipendente(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDipendente(Callback_EAttivitaCondivisa_getDipendente __cb)
    {
        return begin_getDipendente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDipendente(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getDipendente __cb)
    {
        return begin_getDipendente(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDipendente(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDipendente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDipendente_name, __cb);
        try
        {
            __result.__prepare(__getDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public EDipendenteCondiviso end_getDipendente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDipendente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            EDipendenteCondivisoHolder __ret = new EDipendenteCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getId_name = "getId";

    public int getId()
    {
        return getId(null, false);
    }

    public int getId(java.util.Map<String, String> __ctx)
    {
        return getId(__ctx, true);
    }

    private int getId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getId");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getId(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getId()
    {
        return begin_getId(null, false, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx)
    {
        return begin_getId(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getId(Ice.Callback __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getId(Callback_EAttivitaCondivisa_getId __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getId __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getId_name, __cb);
        try
        {
            __result.__prepare(__getId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getInizio_name = "getInizio";

    public java.sql.Timestamp getInizio()
    {
        return getInizio(null, false);
    }

    public java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx)
    {
        return getInizio(__ctx, true);
    }

    private java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInizio");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getInizio(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getInizio()
    {
        return begin_getInizio(null, false, null);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx)
    {
        return begin_getInizio(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getInizio(Ice.Callback __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInizio(Callback_EAttivitaCondivisa_getInizio __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getInizio __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInizio_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInizio_name, __cb);
        try
        {
            __result.__prepare(__getInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getInizio(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInizio_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPadre_name = "getPadre";

    public EAttivitaCondivisa getPadre()
    {
        return getPadre(null, false);
    }

    public EAttivitaCondivisa getPadre(java.util.Map<String, String> __ctx)
    {
        return getPadre(__ctx, true);
    }

    private EAttivitaCondivisa getPadre(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPadre", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPadre");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getPadre(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPadre()
    {
        return begin_getPadre(null, false, null);
    }

    public Ice.AsyncResult begin_getPadre(java.util.Map<String, String> __ctx)
    {
        return begin_getPadre(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPadre(Ice.Callback __cb)
    {
        return begin_getPadre(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPadre(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPadre(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPadre(Callback_EAttivitaCondivisa_getPadre __cb)
    {
        return begin_getPadre(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPadre(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getPadre __cb)
    {
        return begin_getPadre(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPadre(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPadre_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPadre_name, __cb);
        try
        {
            __result.__prepare(__getPadre_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public EAttivitaCondivisa end_getPadre(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPadre_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            EAttivitaCondivisaHolder __ret = new EAttivitaCondivisaHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getScadenza_name = "getScadenza";

    public java.sql.Timestamp getScadenza()
    {
        return getScadenza(null, false);
    }

    public java.sql.Timestamp getScadenza(java.util.Map<String, String> __ctx)
    {
        return getScadenza(__ctx, true);
    }

    private java.sql.Timestamp getScadenza(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getScadenza", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getScadenza");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getScadenza(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getScadenza()
    {
        return begin_getScadenza(null, false, null);
    }

    public Ice.AsyncResult begin_getScadenza(java.util.Map<String, String> __ctx)
    {
        return begin_getScadenza(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getScadenza(Ice.Callback __cb)
    {
        return begin_getScadenza(null, false, __cb);
    }

    public Ice.AsyncResult begin_getScadenza(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getScadenza(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getScadenza(Callback_EAttivitaCondivisa_getScadenza __cb)
    {
        return begin_getScadenza(null, false, __cb);
    }

    public Ice.AsyncResult begin_getScadenza(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getScadenza __cb)
    {
        return begin_getScadenza(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getScadenza(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getScadenza_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getScadenza_name, __cb);
        try
        {
            __result.__prepare(__getScadenza_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getScadenza(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getScadenza_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTitolo_name = "getTitolo";

    public String getTitolo()
    {
        return getTitolo(null, false);
    }

    public String getTitolo(java.util.Map<String, String> __ctx)
    {
        return getTitolo(__ctx, true);
    }

    private String getTitolo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTitolo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTitolo");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getTitolo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTitolo()
    {
        return begin_getTitolo(null, false, null);
    }

    public Ice.AsyncResult begin_getTitolo(java.util.Map<String, String> __ctx)
    {
        return begin_getTitolo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTitolo(Ice.Callback __cb)
    {
        return begin_getTitolo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTitolo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTitolo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTitolo(Callback_EAttivitaCondivisa_getTitolo __cb)
    {
        return begin_getTitolo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTitolo(java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_getTitolo __cb)
    {
        return begin_getTitolo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTitolo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTitolo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTitolo_name, __cb);
        try
        {
            __result.__prepare(__getTitolo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTitolo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTitolo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setBudget_name = "setBudget";

    public void setBudget(double budget)
    {
        setBudget(budget, null, false);
    }

    public void setBudget(double budget, java.util.Map<String, String> __ctx)
    {
        setBudget(budget, __ctx, true);
    }

    private void setBudget(double budget, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setBudget", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setBudget(budget, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setBudget(double budget)
    {
        return begin_setBudget(budget, null, false, null);
    }

    public Ice.AsyncResult begin_setBudget(double budget, java.util.Map<String, String> __ctx)
    {
        return begin_setBudget(budget, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setBudget(double budget, Ice.Callback __cb)
    {
        return begin_setBudget(budget, null, false, __cb);
    }

    public Ice.AsyncResult begin_setBudget(double budget, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setBudget(budget, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setBudget(double budget, Callback_EAttivitaCondivisa_setBudget __cb)
    {
        return begin_setBudget(budget, null, false, __cb);
    }

    public Ice.AsyncResult begin_setBudget(double budget, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setBudget __cb)
    {
        return begin_setBudget(budget, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setBudget(double budget, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setBudget_name, __cb);
        try
        {
            __result.__prepare(__setBudget_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(budget);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setBudget(Ice.AsyncResult __result)
    {
        __end(__result, __setBudget_name);
    }

    private static final String __setCosto_name = "setCosto";

    public void setCosto(double costo)
    {
        setCosto(costo, null, false);
    }

    public void setCosto(double costo, java.util.Map<String, String> __ctx)
    {
        setCosto(costo, __ctx, true);
    }

    private void setCosto(double costo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCosto", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setCosto(costo, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCosto(double costo)
    {
        return begin_setCosto(costo, null, false, null);
    }

    public Ice.AsyncResult begin_setCosto(double costo, java.util.Map<String, String> __ctx)
    {
        return begin_setCosto(costo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCosto(double costo, Ice.Callback __cb)
    {
        return begin_setCosto(costo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCosto(double costo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCosto(costo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCosto(double costo, Callback_EAttivitaCondivisa_setCosto __cb)
    {
        return begin_setCosto(costo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCosto(double costo, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setCosto __cb)
    {
        return begin_setCosto(costo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCosto(double costo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCosto_name, __cb);
        try
        {
            __result.__prepare(__setCosto_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(costo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCosto(Ice.AsyncResult __result)
    {
        __end(__result, __setCosto_name);
    }

    private static final String __setDescrizione_name = "setDescrizione";

    public void setDescrizione(String descrizione)
    {
        setDescrizione(descrizione, null, false);
    }

    public void setDescrizione(String descrizione, java.util.Map<String, String> __ctx)
    {
        setDescrizione(descrizione, __ctx, true);
    }

    private void setDescrizione(String descrizione, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setDescrizione", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setDescrizione(descrizione, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione)
    {
        return begin_setDescrizione(descrizione, null, false, null);
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione, java.util.Map<String, String> __ctx)
    {
        return begin_setDescrizione(descrizione, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione, Ice.Callback __cb)
    {
        return begin_setDescrizione(descrizione, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setDescrizione(descrizione, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione, Callback_EAttivitaCondivisa_setDescrizione __cb)
    {
        return begin_setDescrizione(descrizione, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDescrizione(String descrizione, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setDescrizione __cb)
    {
        return begin_setDescrizione(descrizione, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setDescrizione(String descrizione, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setDescrizione_name, __cb);
        try
        {
            __result.__prepare(__setDescrizione_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(descrizione);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setDescrizione(Ice.AsyncResult __result)
    {
        __end(__result, __setDescrizione_name);
    }

    private static final String __setDipendente_name = "setDipendente";

    public void setDipendente(EDipendenteCondiviso dipendente)
    {
        setDipendente(dipendente, null, false);
    }

    public void setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        setDipendente(dipendente, __ctx, true);
    }

    private void setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setDipendente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setDipendente(dipendente, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente)
    {
        return begin_setDipendente(dipendente, null, false, null);
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx)
    {
        return begin_setDipendente(dipendente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, Ice.Callback __cb)
    {
        return begin_setDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setDipendente(dipendente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, Callback_EAttivitaCondivisa_setDipendente __cb)
    {
        return begin_setDipendente(dipendente, null, false, __cb);
    }

    public Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setDipendente __cb)
    {
        return begin_setDipendente(dipendente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setDipendente(EDipendenteCondiviso dipendente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setDipendente_name, __cb);
        try
        {
            __result.__prepare(__setDipendente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(dipendente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setDipendente(Ice.AsyncResult __result)
    {
        __end(__result, __setDipendente_name);
    }

    private static final String __setId_name = "setId";

    public void setId(int id)
    {
        setId(id, null, false);
    }

    public void setId(int id, java.util.Map<String, String> __ctx)
    {
        setId(id, __ctx, true);
    }

    private void setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setId(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setId(int id)
    {
        return begin_setId(id, null, false, null);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx)
    {
        return begin_setId(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setId(int id, Ice.Callback __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, Callback_EAttivitaCondivisa_setId __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setId __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setId_name, __cb);
        try
        {
            __result.__prepare(__setId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setId(Ice.AsyncResult __result)
    {
        __end(__result, __setId_name);
    }

    private static final String __setInizio_name = "setInizio";

    public void setInizio(java.sql.Timestamp inizio)
    {
        setInizio(inizio, null, false);
    }

    public void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        setInizio(inizio, __ctx, true);
    }

    private void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setInizio(inizio, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio)
    {
        return begin_setInizio(inizio, null, false, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        return begin_setInizio(inizio, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Callback_EAttivitaCondivisa_setInizio __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setInizio __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setInizio_name, __cb);
        try
        {
            __result.__prepare(__setInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(inizio);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setInizio(Ice.AsyncResult __result)
    {
        __end(__result, __setInizio_name);
    }

    private static final String __setPadre_name = "setPadre";

    public void setPadre(EAttivitaCondivisa padre)
    {
        setPadre(padre, null, false);
    }

    public void setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx)
    {
        setPadre(padre, __ctx, true);
    }

    private void setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPadre", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setPadre(padre, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre)
    {
        return begin_setPadre(padre, null, false, null);
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx)
    {
        return begin_setPadre(padre, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, Ice.Callback __cb)
    {
        return begin_setPadre(padre, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPadre(padre, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, Callback_EAttivitaCondivisa_setPadre __cb)
    {
        return begin_setPadre(padre, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setPadre __cb)
    {
        return begin_setPadre(padre, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPadre(EAttivitaCondivisa padre, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPadre_name, __cb);
        try
        {
            __result.__prepare(__setPadre_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(padre);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPadre(Ice.AsyncResult __result)
    {
        __end(__result, __setPadre_name);
    }

    private static final String __setScadenza_name = "setScadenza";

    public void setScadenza(java.sql.Timestamp scadenza)
    {
        setScadenza(scadenza, null, false);
    }

    public void setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx)
    {
        setScadenza(scadenza, __ctx, true);
    }

    private void setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setScadenza", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setScadenza(scadenza, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza)
    {
        return begin_setScadenza(scadenza, null, false, null);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx)
    {
        return begin_setScadenza(scadenza, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, Ice.Callback __cb)
    {
        return begin_setScadenza(scadenza, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setScadenza(scadenza, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, Callback_EAttivitaCondivisa_setScadenza __cb)
    {
        return begin_setScadenza(scadenza, null, false, __cb);
    }

    public Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setScadenza __cb)
    {
        return begin_setScadenza(scadenza, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setScadenza(java.sql.Timestamp scadenza, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setScadenza_name, __cb);
        try
        {
            __result.__prepare(__setScadenza_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(scadenza);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setScadenza(Ice.AsyncResult __result)
    {
        __end(__result, __setScadenza_name);
    }

    private static final String __setTitolo_name = "setTitolo";

    public void setTitolo(String titolo)
    {
        setTitolo(titolo, null, false);
    }

    public void setTitolo(String titolo, java.util.Map<String, String> __ctx)
    {
        setTitolo(titolo, __ctx, true);
    }

    private void setTitolo(String titolo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setTitolo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setTitolo(titolo, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setTitolo(String titolo)
    {
        return begin_setTitolo(titolo, null, false, null);
    }

    public Ice.AsyncResult begin_setTitolo(String titolo, java.util.Map<String, String> __ctx)
    {
        return begin_setTitolo(titolo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setTitolo(String titolo, Ice.Callback __cb)
    {
        return begin_setTitolo(titolo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTitolo(String titolo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setTitolo(titolo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setTitolo(String titolo, Callback_EAttivitaCondivisa_setTitolo __cb)
    {
        return begin_setTitolo(titolo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setTitolo(String titolo, java.util.Map<String, String> __ctx, Callback_EAttivitaCondivisa_setTitolo __cb)
    {
        return begin_setTitolo(titolo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setTitolo(String titolo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setTitolo_name, __cb);
        try
        {
            __result.__prepare(__setTitolo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titolo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setTitolo(Ice.AsyncResult __result)
    {
        __end(__result, __setTitolo_name);
    }

    private static final String __aggiungiTask_name = "aggiungiTask";

    public ETaskCondiviso aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente)
    {
        return aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, null, false);
    }

    public ETaskCondiviso aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        return aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, __ctx, true);
    }

    private ETaskCondiviso aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "aggiungiTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("aggiungiTask");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, null, false, null);
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, Ice.Callback __cb)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, Callback_ESottoprogettoCondiviso_aggiungiTask __cb)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx, Callback_ESottoprogettoCondiviso_aggiungiTask __cb)
    {
        return begin_aggiungiTask(titolo, descrizione, budget, inizio, scadenza, consulente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_aggiungiTask(String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__aggiungiTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __aggiungiTask_name, __cb);
        try
        {
            __result.__prepare(__aggiungiTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(titolo);
            __os.writeString(descrizione);
            __os.writeDouble(budget);
            __os.writeSerializable(inizio);
            __os.writeSerializable(scadenza);
            __os.writeObject(consulente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public ETaskCondiviso end_aggiungiTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __aggiungiTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            ETaskCondivisoHolder __ret = new ETaskCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getlistTask_name = "getlistTask";

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getlistTask()
    {
        return getlistTask(null, false);
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getlistTask(java.util.Map<String, String> __ctx)
    {
        return getlistTask(__ctx, true);
    }

    private java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> getlistTask(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getlistTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getlistTask");
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    return __del.getlistTask(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getlistTask()
    {
        return begin_getlistTask(null, false, null);
    }

    public Ice.AsyncResult begin_getlistTask(java.util.Map<String, String> __ctx)
    {
        return begin_getlistTask(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getlistTask(Ice.Callback __cb)
    {
        return begin_getlistTask(null, false, __cb);
    }

    public Ice.AsyncResult begin_getlistTask(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getlistTask(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getlistTask(Callback_ESottoprogettoCondiviso_getlistTask __cb)
    {
        return begin_getlistTask(null, false, __cb);
    }

    public Ice.AsyncResult begin_getlistTask(java.util.Map<String, String> __ctx, Callback_ESottoprogettoCondiviso_getlistTask __cb)
    {
        return begin_getlistTask(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getlistTask(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getlistTask_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getlistTask_name, __cb);
        try
        {
            __result.__prepare(__getlistTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> end_getlistTask(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getlistTask_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> __ret;
            __ret = listaTaskHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setlistTask_name = "setlistTask";

    public void setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks)
    {
        setlistTask(listTasks, null, false);
    }

    public void setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx)
    {
        setlistTask(listTasks, __ctx, true);
    }

    private void setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setlistTask", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ESottoprogettoCondivisoDel __del = (_ESottoprogettoCondivisoDel)__delBase;
                    __del.setlistTask(listTasks, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks)
    {
        return begin_setlistTask(listTasks, null, false, null);
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx)
    {
        return begin_setlistTask(listTasks, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, Ice.Callback __cb)
    {
        return begin_setlistTask(listTasks, null, false, __cb);
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setlistTask(listTasks, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, Callback_ESottoprogettoCondiviso_setlistTask __cb)
    {
        return begin_setlistTask(listTasks, null, false, __cb);
    }

    public Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx, Callback_ESottoprogettoCondiviso_setlistTask __cb)
    {
        return begin_setlistTask(listTasks, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setlistTask(java.util.ArrayList<Condivisione.EntityCondivise.ETaskCondiviso> listTasks, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setlistTask_name, __cb);
        try
        {
            __result.__prepare(__setlistTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            listaTaskHelper.write(__os, listTasks);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setlistTask(Ice.AsyncResult __result)
    {
        __end(__result, __setlistTask_name);
    }

    public static ESottoprogettoCondivisoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ESottoprogettoCondivisoPrx)
            {
                __d = (ESottoprogettoCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ESottoprogettoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ESottoprogettoCondivisoPrx)
            {
                __d = (ESottoprogettoCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ESottoprogettoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ESottoprogettoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ESottoprogettoCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ESottoprogettoCondivisoPrx)
            {
                __d = (ESottoprogettoCondivisoPrx)__obj;
            }
            else
            {
                ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ESottoprogettoCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ESottoprogettoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ESottoprogettoCondivisoPrxHelper __h = new ESottoprogettoCondivisoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::EAttivitaCondivisa",
        "::Condivisione::EntityCondivise::ESottoprogettoCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ESottoprogettoCondivisoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ESottoprogettoCondivisoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ESottoprogettoCondivisoPrx v)
    {
        __os.writeProxy(v);
    }

    public static ESottoprogettoCondivisoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ESottoprogettoCondivisoPrxHelper result = new ESottoprogettoCondivisoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
