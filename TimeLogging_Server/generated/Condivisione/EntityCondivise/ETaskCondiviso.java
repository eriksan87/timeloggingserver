// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public abstract class ETaskCondiviso extends EAttivitaCondivisa
                                     implements _ETaskCondivisoOperations,
                                                _ETaskCondivisoOperationsNC
{
    public ETaskCondiviso()
    {
        super();
    }

    public ETaskCondiviso(int id, String titolo, String descrizione, double budget, java.sql.Timestamp inizio, java.sql.Timestamp scadenza, EDipendenteCondiviso dipendente, EAttivitaCondivisa padre, double costo, boolean abilitato, java.util.ArrayList<ETariffaCondivisa> tariffe, java.sql.Timestamp assegnatoIl, java.sql.Timestamp revocatoIl, java.util.ArrayList<ETimeRecordCondiviso> listTRL)
    {
        super(id, titolo, descrizione, budget, inizio, scadenza, dipendente, padre, costo);
        this.abilitato = abilitato;
        this.tariffe = tariffe;
        this.assegnatoIl = assegnatoIl;
        this.revocatoIl = revocatoIl;
        this.listTRL = listTRL;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::EAttivitaCondivisa",
        "::Condivisione::EntityCondivise::ETaskCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final boolean getAbilitato()
    {
        return getAbilitato(null);
    }

    public final java.sql.Timestamp getAssegnato()
    {
        return getAssegnato(null);
    }

    public final java.util.ArrayList<ETimeRecordCondiviso> getListTRL()
    {
        return getListTRL(null);
    }

    public final java.sql.Timestamp getRevocato()
    {
        return getRevocato(null);
    }

    public final void setAbilitato(boolean abilitato)
    {
        setAbilitato(abilitato, null);
    }

    public final void setAssegnato(java.sql.Timestamp assegnatoIl)
    {
        setAssegnato(assegnatoIl, null);
    }

    public final void setRevocato(java.sql.Timestamp revocatoIl)
    {
        setRevocato(revocatoIl, null);
    }

    public final void setlistTRL(java.util.ArrayList<ETimeRecordCondiviso> listTRL)
    {
        setlistTRL(listTRL, null);
    }

    public static Ice.DispatchStatus ___setAbilitato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean abilitato;
        abilitato = __is.readBool();
        __inS.endReadParams();
        __obj.setAbilitato(abilitato, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setAssegnato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.sql.Timestamp assegnatoIl;
        assegnatoIl = (java.sql.Timestamp)__is.readSerializable();
        __inS.endReadParams();
        __obj.setAssegnato(assegnatoIl, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setRevocato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.sql.Timestamp revocatoIl;
        revocatoIl = (java.sql.Timestamp)__is.readSerializable();
        __inS.endReadParams();
        __obj.setRevocato(revocatoIl, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___setlistTRL(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        java.util.ArrayList<ETimeRecordCondiviso> listTRL;
        listTRL = listTRLavorativoHelper.read(__is);
        __is.readPendingObjects();
        __inS.endReadParams();
        __obj.setlistTRL(listTRL, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getAbilitato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        boolean __ret = __obj.getAbilitato(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeBool(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getAssegnato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.sql.Timestamp __ret = __obj.getAssegnato(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeSerializable(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getRevocato(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.sql.Timestamp __ret = __obj.getRevocato(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeSerializable(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getListTRL(ETaskCondiviso __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.util.ArrayList<ETimeRecordCondiviso> __ret = __obj.getListTRL(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        listTRLavorativoHelper.write(__os, __ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "elaboraCosti",
        "getAbilitato",
        "getAssegnato",
        "getBudget",
        "getCosto",
        "getDescrizione",
        "getDipendente",
        "getId",
        "getInizio",
        "getListTRL",
        "getPadre",
        "getRevocato",
        "getScadenza",
        "getTitolo",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "setAbilitato",
        "setAssegnato",
        "setBudget",
        "setCosto",
        "setDescrizione",
        "setDipendente",
        "setId",
        "setInizio",
        "setPadre",
        "setRevocato",
        "setScadenza",
        "setTitolo",
        "setlistTRL"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return EAttivitaCondivisa.___elaboraCosti(this, in, __current);
            }
            case 1:
            {
                return ___getAbilitato(this, in, __current);
            }
            case 2:
            {
                return ___getAssegnato(this, in, __current);
            }
            case 3:
            {
                return EAttivitaCondivisa.___getBudget(this, in, __current);
            }
            case 4:
            {
                return EAttivitaCondivisa.___getCosto(this, in, __current);
            }
            case 5:
            {
                return EAttivitaCondivisa.___getDescrizione(this, in, __current);
            }
            case 6:
            {
                return EAttivitaCondivisa.___getDipendente(this, in, __current);
            }
            case 7:
            {
                return EAttivitaCondivisa.___getId(this, in, __current);
            }
            case 8:
            {
                return EAttivitaCondivisa.___getInizio(this, in, __current);
            }
            case 9:
            {
                return ___getListTRL(this, in, __current);
            }
            case 10:
            {
                return EAttivitaCondivisa.___getPadre(this, in, __current);
            }
            case 11:
            {
                return ___getRevocato(this, in, __current);
            }
            case 12:
            {
                return EAttivitaCondivisa.___getScadenza(this, in, __current);
            }
            case 13:
            {
                return EAttivitaCondivisa.___getTitolo(this, in, __current);
            }
            case 14:
            {
                return ___ice_id(this, in, __current);
            }
            case 15:
            {
                return ___ice_ids(this, in, __current);
            }
            case 16:
            {
                return ___ice_isA(this, in, __current);
            }
            case 17:
            {
                return ___ice_ping(this, in, __current);
            }
            case 18:
            {
                return ___setAbilitato(this, in, __current);
            }
            case 19:
            {
                return ___setAssegnato(this, in, __current);
            }
            case 20:
            {
                return EAttivitaCondivisa.___setBudget(this, in, __current);
            }
            case 21:
            {
                return EAttivitaCondivisa.___setCosto(this, in, __current);
            }
            case 22:
            {
                return EAttivitaCondivisa.___setDescrizione(this, in, __current);
            }
            case 23:
            {
                return EAttivitaCondivisa.___setDipendente(this, in, __current);
            }
            case 24:
            {
                return EAttivitaCondivisa.___setId(this, in, __current);
            }
            case 25:
            {
                return EAttivitaCondivisa.___setInizio(this, in, __current);
            }
            case 26:
            {
                return EAttivitaCondivisa.___setPadre(this, in, __current);
            }
            case 27:
            {
                return ___setRevocato(this, in, __current);
            }
            case 28:
            {
                return EAttivitaCondivisa.___setScadenza(this, in, __current);
            }
            case 29:
            {
                return EAttivitaCondivisa.___setTitolo(this, in, __current);
            }
            case 30:
            {
                return ___setlistTRL(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeBool(abilitato);
        listTariffeHelper.write(__os, tariffe);
        __os.writeSerializable(assegnatoIl);
        __os.writeSerializable(revocatoIl);
        listTRLavorativoHelper.write(__os, listTRL);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    private class Patcher implements IceInternal.Patcher
    {
        Patcher(int member)
        {
            __member = member;
        }

        public void
        patch(Ice.Object v)
        {
            switch(__member)
            {
            case 0:
                __typeId = "::Condivisione::EntityCondivise::EDipendenteCondiviso";
                if(v == null || v instanceof EDipendenteCondiviso)
                {
                    dipendente = (EDipendenteCondiviso)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            case 1:
                __typeId = "::Condivisione::EntityCondivise::EAttivitaCondivisa";
                if(v == null || v instanceof EAttivitaCondivisa)
                {
                    padre = (EAttivitaCondivisa)v;
                }
                else
                {
                    IceInternal.Ex.throwUOE(type(), v);
                }
                break;
            }
        }

        public String
        type()
        {
            return __typeId;
        }

        private int __member;
        private String __typeId;
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        abilitato = __is.readBool();
        tariffe = listTariffeHelper.read(__is);
        assegnatoIl = (java.sql.Timestamp)__is.readSerializable();
        revocatoIl = (java.sql.Timestamp)__is.readSerializable();
        listTRL = listTRLavorativoHelper.read(__is);
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public boolean abilitato;

    public java.util.ArrayList<ETariffaCondivisa> tariffe;

    public java.sql.Timestamp assegnatoIl;

    public java.sql.Timestamp revocatoIl;

    public java.util.ArrayList<ETimeRecordCondiviso> listTRL;

    public static final long serialVersionUID = -1992078827L;
}
