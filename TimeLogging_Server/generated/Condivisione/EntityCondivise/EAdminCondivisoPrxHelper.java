// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public final class EAdminCondivisoPrxHelper extends Ice.ObjectPrxHelperBase implements EAdminCondivisoPrx
{
    private static final String __getAnzianita_name = "getAnzianita";

    public int getAnzianita()
    {
        return getAnzianita(null, false);
    }

    public int getAnzianita(java.util.Map<String, String> __ctx)
    {
        return getAnzianita(__ctx, true);
    }

    private int getAnzianita(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAnzianita", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAnzianita");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getAnzianita(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAnzianita()
    {
        return begin_getAnzianita(null, false, null);
    }

    public Ice.AsyncResult begin_getAnzianita(java.util.Map<String, String> __ctx)
    {
        return begin_getAnzianita(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAnzianita(Ice.Callback __cb)
    {
        return begin_getAnzianita(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAnzianita(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAnzianita(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAnzianita(Callback_EDipendenteCondiviso_getAnzianita __cb)
    {
        return begin_getAnzianita(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAnzianita(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getAnzianita __cb)
    {
        return begin_getAnzianita(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAnzianita(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAnzianita_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAnzianita_name, __cb);
        try
        {
            __result.__prepare(__getAnzianita_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getAnzianita(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAnzianita_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCognome_name = "getCognome";

    public String getCognome()
    {
        return getCognome(null, false);
    }

    public String getCognome(java.util.Map<String, String> __ctx)
    {
        return getCognome(__ctx, true);
    }

    private String getCognome(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCognome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCognome");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getCognome(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCognome()
    {
        return begin_getCognome(null, false, null);
    }

    public Ice.AsyncResult begin_getCognome(java.util.Map<String, String> __ctx)
    {
        return begin_getCognome(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCognome(Ice.Callback __cb)
    {
        return begin_getCognome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCognome(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCognome(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCognome(Callback_EDipendenteCondiviso_getCognome __cb)
    {
        return begin_getCognome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCognome(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getCognome __cb)
    {
        return begin_getCognome(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCognome(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCognome_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCognome_name, __cb);
        try
        {
            __result.__prepare(__getCognome_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCognome(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCognome_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFigProfessionale_name = "getFigProfessionale";

    public String getFigProfessionale()
    {
        return getFigProfessionale(null, false);
    }

    public String getFigProfessionale(java.util.Map<String, String> __ctx)
    {
        return getFigProfessionale(__ctx, true);
    }

    private String getFigProfessionale(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFigProfessionale", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFigProfessionale");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getFigProfessionale(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFigProfessionale()
    {
        return begin_getFigProfessionale(null, false, null);
    }

    public Ice.AsyncResult begin_getFigProfessionale(java.util.Map<String, String> __ctx)
    {
        return begin_getFigProfessionale(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFigProfessionale(Ice.Callback __cb)
    {
        return begin_getFigProfessionale(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFigProfessionale(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFigProfessionale(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFigProfessionale(Callback_EDipendenteCondiviso_getFigProfessionale __cb)
    {
        return begin_getFigProfessionale(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFigProfessionale(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getFigProfessionale __cb)
    {
        return begin_getFigProfessionale(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFigProfessionale(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFigProfessionale_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFigProfessionale_name, __cb);
        try
        {
            __result.__prepare(__getFigProfessionale_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getFigProfessionale(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFigProfessionale_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getId_name = "getId";

    public int getId()
    {
        return getId(null, false);
    }

    public int getId(java.util.Map<String, String> __ctx)
    {
        return getId(__ctx, true);
    }

    private int getId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getId");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getId(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getId()
    {
        return begin_getId(null, false, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx)
    {
        return begin_getId(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getId(Ice.Callback __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getId(Callback_EDipendenteCondiviso_getId __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getId __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getId_name, __cb);
        try
        {
            __result.__prepare(__getId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getIndirizzo_name = "getIndirizzo";

    public String getIndirizzo()
    {
        return getIndirizzo(null, false);
    }

    public String getIndirizzo(java.util.Map<String, String> __ctx)
    {
        return getIndirizzo(__ctx, true);
    }

    private String getIndirizzo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getIndirizzo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getIndirizzo");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getIndirizzo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getIndirizzo()
    {
        return begin_getIndirizzo(null, false, null);
    }

    public Ice.AsyncResult begin_getIndirizzo(java.util.Map<String, String> __ctx)
    {
        return begin_getIndirizzo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getIndirizzo(Ice.Callback __cb)
    {
        return begin_getIndirizzo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getIndirizzo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getIndirizzo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getIndirizzo(Callback_EDipendenteCondiviso_getIndirizzo __cb)
    {
        return begin_getIndirizzo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getIndirizzo(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getIndirizzo __cb)
    {
        return begin_getIndirizzo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getIndirizzo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getIndirizzo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getIndirizzo_name, __cb);
        try
        {
            __result.__prepare(__getIndirizzo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getIndirizzo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getIndirizzo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getNome_name = "getNome";

    public String getNome()
    {
        return getNome(null, false);
    }

    public String getNome(java.util.Map<String, String> __ctx)
    {
        return getNome(__ctx, true);
    }

    private String getNome(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getNome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getNome");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getNome(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getNome()
    {
        return begin_getNome(null, false, null);
    }

    public Ice.AsyncResult begin_getNome(java.util.Map<String, String> __ctx)
    {
        return begin_getNome(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getNome(Ice.Callback __cb)
    {
        return begin_getNome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNome(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getNome(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getNome(Callback_EDipendenteCondiviso_getNome __cb)
    {
        return begin_getNome(null, false, __cb);
    }

    public Ice.AsyncResult begin_getNome(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getNome __cb)
    {
        return begin_getNome(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getNome(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getNome_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getNome_name, __cb);
        try
        {
            __result.__prepare(__getNome_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getNome(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getNome_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPagaBase_name = "getPagaBase";

    public double getPagaBase()
    {
        return getPagaBase(null, false);
    }

    public double getPagaBase(java.util.Map<String, String> __ctx)
    {
        return getPagaBase(__ctx, true);
    }

    private double getPagaBase(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPagaBase", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPagaBase");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getPagaBase(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPagaBase()
    {
        return begin_getPagaBase(null, false, null);
    }

    public Ice.AsyncResult begin_getPagaBase(java.util.Map<String, String> __ctx)
    {
        return begin_getPagaBase(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPagaBase(Ice.Callback __cb)
    {
        return begin_getPagaBase(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPagaBase(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPagaBase(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPagaBase(Callback_EDipendenteCondiviso_getPagaBase __cb)
    {
        return begin_getPagaBase(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPagaBase(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getPagaBase __cb)
    {
        return begin_getPagaBase(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPagaBase(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPagaBase_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPagaBase_name, __cb);
        try
        {
            __result.__prepare(__getPagaBase_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public double end_getPagaBase(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPagaBase_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            double __ret;
            __ret = __is.readDouble();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPassword_name = "getPassword";

    public String getPassword()
    {
        return getPassword(null, false);
    }

    public String getPassword(java.util.Map<String, String> __ctx)
    {
        return getPassword(__ctx, true);
    }

    private String getPassword(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPassword", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPassword");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getPassword(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPassword()
    {
        return begin_getPassword(null, false, null);
    }

    public Ice.AsyncResult begin_getPassword(java.util.Map<String, String> __ctx)
    {
        return begin_getPassword(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getPassword(Ice.Callback __cb)
    {
        return begin_getPassword(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassword(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPassword(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPassword(Callback_EDipendenteCondiviso_getPassword __cb)
    {
        return begin_getPassword(null, false, __cb);
    }

    public Ice.AsyncResult begin_getPassword(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getPassword __cb)
    {
        return begin_getPassword(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPassword(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPassword_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPassword_name, __cb);
        try
        {
            __result.__prepare(__getPassword_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getPassword(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPassword_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getTag_name = "getTag";

    public String getTag()
    {
        return getTag(null, false);
    }

    public String getTag(java.util.Map<String, String> __ctx)
    {
        return getTag(__ctx, true);
    }

    private String getTag(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getTag", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getTag");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getTag(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getTag()
    {
        return begin_getTag(null, false, null);
    }

    public Ice.AsyncResult begin_getTag(java.util.Map<String, String> __ctx)
    {
        return begin_getTag(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getTag(Ice.Callback __cb)
    {
        return begin_getTag(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTag(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getTag(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getTag(Callback_EDipendenteCondiviso_getTag __cb)
    {
        return begin_getTag(null, false, __cb);
    }

    public Ice.AsyncResult begin_getTag(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getTag __cb)
    {
        return begin_getTag(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getTag(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getTag_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getTag_name, __cb);
        try
        {
            __result.__prepare(__getTag_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getTag(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getTag_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getUsername_name = "getUsername";

    public String getUsername()
    {
        return getUsername(null, false);
    }

    public String getUsername(java.util.Map<String, String> __ctx)
    {
        return getUsername(__ctx, true);
    }

    private String getUsername(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getUsername", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getUsername");
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    return __del.getUsername(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getUsername()
    {
        return begin_getUsername(null, false, null);
    }

    public Ice.AsyncResult begin_getUsername(java.util.Map<String, String> __ctx)
    {
        return begin_getUsername(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getUsername(Ice.Callback __cb)
    {
        return begin_getUsername(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUsername(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getUsername(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getUsername(Callback_EDipendenteCondiviso_getUsername __cb)
    {
        return begin_getUsername(null, false, __cb);
    }

    public Ice.AsyncResult begin_getUsername(java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_getUsername __cb)
    {
        return begin_getUsername(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getUsername(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getUsername_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getUsername_name, __cb);
        try
        {
            __result.__prepare(__getUsername_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getUsername(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getUsername_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setAnzianita_name = "setAnzianita";

    public void setAnzianita(int anzianita)
    {
        setAnzianita(anzianita, null, false);
    }

    public void setAnzianita(int anzianita, java.util.Map<String, String> __ctx)
    {
        setAnzianita(anzianita, __ctx, true);
    }

    private void setAnzianita(int anzianita, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setAnzianita", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setAnzianita(anzianita, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita)
    {
        return begin_setAnzianita(anzianita, null, false, null);
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita, java.util.Map<String, String> __ctx)
    {
        return begin_setAnzianita(anzianita, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita, Ice.Callback __cb)
    {
        return begin_setAnzianita(anzianita, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setAnzianita(anzianita, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita, Callback_EDipendenteCondiviso_setAnzianita __cb)
    {
        return begin_setAnzianita(anzianita, null, false, __cb);
    }

    public Ice.AsyncResult begin_setAnzianita(int anzianita, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setAnzianita __cb)
    {
        return begin_setAnzianita(anzianita, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setAnzianita(int anzianita, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setAnzianita_name, __cb);
        try
        {
            __result.__prepare(__setAnzianita_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(anzianita);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setAnzianita(Ice.AsyncResult __result)
    {
        __end(__result, __setAnzianita_name);
    }

    private static final String __setCognome_name = "setCognome";

    public void setCognome(String cognome)
    {
        setCognome(cognome, null, false);
    }

    public void setCognome(String cognome, java.util.Map<String, String> __ctx)
    {
        setCognome(cognome, __ctx, true);
    }

    private void setCognome(String cognome, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCognome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setCognome(cognome, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCognome(String cognome)
    {
        return begin_setCognome(cognome, null, false, null);
    }

    public Ice.AsyncResult begin_setCognome(String cognome, java.util.Map<String, String> __ctx)
    {
        return begin_setCognome(cognome, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCognome(String cognome, Ice.Callback __cb)
    {
        return begin_setCognome(cognome, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCognome(String cognome, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCognome(cognome, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCognome(String cognome, Callback_EDipendenteCondiviso_setCognome __cb)
    {
        return begin_setCognome(cognome, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCognome(String cognome, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setCognome __cb)
    {
        return begin_setCognome(cognome, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCognome(String cognome, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCognome_name, __cb);
        try
        {
            __result.__prepare(__setCognome_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(cognome);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCognome(Ice.AsyncResult __result)
    {
        __end(__result, __setCognome_name);
    }

    private static final String __setFigProfessionale_name = "setFigProfessionale";

    public void setFigProfessionale(String figProfessionale)
    {
        setFigProfessionale(figProfessionale, null, false);
    }

    public void setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx)
    {
        setFigProfessionale(figProfessionale, __ctx, true);
    }

    private void setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setFigProfessionale", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setFigProfessionale(figProfessionale, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale)
    {
        return begin_setFigProfessionale(figProfessionale, null, false, null);
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx)
    {
        return begin_setFigProfessionale(figProfessionale, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, Ice.Callback __cb)
    {
        return begin_setFigProfessionale(figProfessionale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFigProfessionale(figProfessionale, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, Callback_EDipendenteCondiviso_setFigProfessionale __cb)
    {
        return begin_setFigProfessionale(figProfessionale, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setFigProfessionale __cb)
    {
        return begin_setFigProfessionale(figProfessionale, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFigProfessionale(String figProfessionale, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFigProfessionale_name, __cb);
        try
        {
            __result.__prepare(__setFigProfessionale_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(figProfessionale);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setFigProfessionale(Ice.AsyncResult __result)
    {
        __end(__result, __setFigProfessionale_name);
    }

    private static final String __setId_name = "setId";

    public void setId(int id)
    {
        setId(id, null, false);
    }

    public void setId(int id, java.util.Map<String, String> __ctx)
    {
        setId(id, __ctx, true);
    }

    private void setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setId(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setId(int id)
    {
        return begin_setId(id, null, false, null);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx)
    {
        return begin_setId(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setId(int id, Ice.Callback __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, Callback_EDipendenteCondiviso_setId __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setId __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setId_name, __cb);
        try
        {
            __result.__prepare(__setId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setId(Ice.AsyncResult __result)
    {
        __end(__result, __setId_name);
    }

    private static final String __setIndirizzo_name = "setIndirizzo";

    public void setIndirizzo(String indirizzo)
    {
        setIndirizzo(indirizzo, null, false);
    }

    public void setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx)
    {
        setIndirizzo(indirizzo, __ctx, true);
    }

    private void setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setIndirizzo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setIndirizzo(indirizzo, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo)
    {
        return begin_setIndirizzo(indirizzo, null, false, null);
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx)
    {
        return begin_setIndirizzo(indirizzo, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo, Ice.Callback __cb)
    {
        return begin_setIndirizzo(indirizzo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setIndirizzo(indirizzo, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo, Callback_EDipendenteCondiviso_setIndirizzo __cb)
    {
        return begin_setIndirizzo(indirizzo, null, false, __cb);
    }

    public Ice.AsyncResult begin_setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setIndirizzo __cb)
    {
        return begin_setIndirizzo(indirizzo, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setIndirizzo(String indirizzo, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setIndirizzo_name, __cb);
        try
        {
            __result.__prepare(__setIndirizzo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(indirizzo);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setIndirizzo(Ice.AsyncResult __result)
    {
        __end(__result, __setIndirizzo_name);
    }

    private static final String __setNome_name = "setNome";

    public void setNome(String nome)
    {
        setNome(nome, null, false);
    }

    public void setNome(String nome, java.util.Map<String, String> __ctx)
    {
        setNome(nome, __ctx, true);
    }

    private void setNome(String nome, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setNome", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setNome(nome, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setNome(String nome)
    {
        return begin_setNome(nome, null, false, null);
    }

    public Ice.AsyncResult begin_setNome(String nome, java.util.Map<String, String> __ctx)
    {
        return begin_setNome(nome, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setNome(String nome, Ice.Callback __cb)
    {
        return begin_setNome(nome, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNome(String nome, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setNome(nome, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setNome(String nome, Callback_EDipendenteCondiviso_setNome __cb)
    {
        return begin_setNome(nome, null, false, __cb);
    }

    public Ice.AsyncResult begin_setNome(String nome, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setNome __cb)
    {
        return begin_setNome(nome, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setNome(String nome, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setNome_name, __cb);
        try
        {
            __result.__prepare(__setNome_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nome);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setNome(Ice.AsyncResult __result)
    {
        __end(__result, __setNome_name);
    }

    private static final String __setPagaBase_name = "setPagaBase";

    public void setPagaBase(double pagaBase)
    {
        setPagaBase(pagaBase, null, false);
    }

    public void setPagaBase(double pagaBase, java.util.Map<String, String> __ctx)
    {
        setPagaBase(pagaBase, __ctx, true);
    }

    private void setPagaBase(double pagaBase, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPagaBase", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setPagaBase(pagaBase, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase)
    {
        return begin_setPagaBase(pagaBase, null, false, null);
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase, java.util.Map<String, String> __ctx)
    {
        return begin_setPagaBase(pagaBase, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase, Ice.Callback __cb)
    {
        return begin_setPagaBase(pagaBase, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPagaBase(pagaBase, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase, Callback_EDipendenteCondiviso_setPagaBase __cb)
    {
        return begin_setPagaBase(pagaBase, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPagaBase(double pagaBase, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setPagaBase __cb)
    {
        return begin_setPagaBase(pagaBase, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPagaBase(double pagaBase, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPagaBase_name, __cb);
        try
        {
            __result.__prepare(__setPagaBase_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeDouble(pagaBase);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPagaBase(Ice.AsyncResult __result)
    {
        __end(__result, __setPagaBase_name);
    }

    private static final String __setPassword_name = "setPassword";

    public void setPassword(String password)
    {
        setPassword(password, null, false);
    }

    public void setPassword(String password, java.util.Map<String, String> __ctx)
    {
        setPassword(password, __ctx, true);
    }

    private void setPassword(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setPassword", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setPassword(password, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setPassword(String password)
    {
        return begin_setPassword(password, null, false, null);
    }

    public Ice.AsyncResult begin_setPassword(String password, java.util.Map<String, String> __ctx)
    {
        return begin_setPassword(password, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setPassword(String password, Ice.Callback __cb)
    {
        return begin_setPassword(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPassword(String password, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setPassword(password, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setPassword(String password, Callback_EDipendenteCondiviso_setPassword __cb)
    {
        return begin_setPassword(password, null, false, __cb);
    }

    public Ice.AsyncResult begin_setPassword(String password, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setPassword __cb)
    {
        return begin_setPassword(password, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setPassword(String password, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setPassword_name, __cb);
        try
        {
            __result.__prepare(__setPassword_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(password);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setPassword(Ice.AsyncResult __result)
    {
        __end(__result, __setPassword_name);
    }

    private static final String __setUsername_name = "setUsername";

    public void setUsername(String username)
    {
        setUsername(username, null, false);
    }

    public void setUsername(String username, java.util.Map<String, String> __ctx)
    {
        setUsername(username, __ctx, true);
    }

    private void setUsername(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setUsername", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _EAdminCondivisoDel __del = (_EAdminCondivisoDel)__delBase;
                    __del.setUsername(username, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setUsername(String username)
    {
        return begin_setUsername(username, null, false, null);
    }

    public Ice.AsyncResult begin_setUsername(String username, java.util.Map<String, String> __ctx)
    {
        return begin_setUsername(username, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setUsername(String username, Ice.Callback __cb)
    {
        return begin_setUsername(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUsername(String username, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setUsername(username, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setUsername(String username, Callback_EDipendenteCondiviso_setUsername __cb)
    {
        return begin_setUsername(username, null, false, __cb);
    }

    public Ice.AsyncResult begin_setUsername(String username, java.util.Map<String, String> __ctx, Callback_EDipendenteCondiviso_setUsername __cb)
    {
        return begin_setUsername(username, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setUsername(String username, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setUsername_name, __cb);
        try
        {
            __result.__prepare(__setUsername_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(username);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setUsername(Ice.AsyncResult __result)
    {
        __end(__result, __setUsername_name);
    }

    public static EAdminCondivisoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EAdminCondivisoPrx)
            {
                __d = (EAdminCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EAdminCondivisoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EAdminCondivisoPrx)
            {
                __d = (EAdminCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static EAdminCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EAdminCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static EAdminCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof EAdminCondivisoPrx)
            {
                __d = (EAdminCondivisoPrx)__obj;
            }
            else
            {
                EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static EAdminCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        EAdminCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            EAdminCondivisoPrxHelper __h = new EAdminCondivisoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::EAdminCondiviso",
        "::Condivisione::EntityCondivise::EDipendenteCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _EAdminCondivisoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _EAdminCondivisoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, EAdminCondivisoPrx v)
    {
        __os.writeProxy(v);
    }

    public static EAdminCondivisoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            EAdminCondivisoPrxHelper result = new EAdminCondivisoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
