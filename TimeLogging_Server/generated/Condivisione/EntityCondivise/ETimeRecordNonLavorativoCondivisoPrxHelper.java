// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Condivisione.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Condivisione.EntityCondivise;

public final class ETimeRecordNonLavorativoCondivisoPrxHelper extends Ice.ObjectPrxHelperBase implements ETimeRecordNonLavorativoCondivisoPrx
{
    private static final String __getCommento_name = "getCommento";

    public String getCommento()
    {
        return getCommento(null, false);
    }

    public String getCommento(java.util.Map<String, String> __ctx)
    {
        return getCommento(__ctx, true);
    }

    private String getCommento(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCommento", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCommento");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getCommento(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCommento()
    {
        return begin_getCommento(null, false, null);
    }

    public Ice.AsyncResult begin_getCommento(java.util.Map<String, String> __ctx)
    {
        return begin_getCommento(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCommento(Ice.Callback __cb)
    {
        return begin_getCommento(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCommento(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCommento(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCommento(Callback_ETimeRecordCondiviso_getCommento __cb)
    {
        return begin_getCommento(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCommento(java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_getCommento __cb)
    {
        return begin_getCommento(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCommento(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCommento_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCommento_name, __cb);
        try
        {
            __result.__prepare(__getCommento_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCommento(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCommento_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getConsulente_name = "getConsulente";

    public EConsulenteCondiviso getConsulente()
    {
        return getConsulente(null, false);
    }

    public EConsulenteCondiviso getConsulente(java.util.Map<String, String> __ctx)
    {
        return getConsulente(__ctx, true);
    }

    private EConsulenteCondiviso getConsulente(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getConsulente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getConsulente");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getConsulente(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getConsulente()
    {
        return begin_getConsulente(null, false, null);
    }

    public Ice.AsyncResult begin_getConsulente(java.util.Map<String, String> __ctx)
    {
        return begin_getConsulente(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getConsulente(Ice.Callback __cb)
    {
        return begin_getConsulente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConsulente(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getConsulente(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getConsulente(Callback_ETimeRecordCondiviso_getConsulente __cb)
    {
        return begin_getConsulente(null, false, __cb);
    }

    public Ice.AsyncResult begin_getConsulente(java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_getConsulente __cb)
    {
        return begin_getConsulente(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getConsulente(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getConsulente_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getConsulente_name, __cb);
        try
        {
            __result.__prepare(__getConsulente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public EConsulenteCondiviso end_getConsulente(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getConsulente_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            EConsulenteCondivisoHolder __ret = new EConsulenteCondivisoHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret.value;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getFine_name = "getFine";

    public java.sql.Timestamp getFine()
    {
        return getFine(null, false);
    }

    public java.sql.Timestamp getFine(java.util.Map<String, String> __ctx)
    {
        return getFine(__ctx, true);
    }

    private java.sql.Timestamp getFine(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getFine", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getFine");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getFine(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getFine()
    {
        return begin_getFine(null, false, null);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx)
    {
        return begin_getFine(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getFine(Ice.Callback __cb)
    {
        return begin_getFine(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getFine(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getFine(Callback_ETimeRecordCondiviso_getFine __cb)
    {
        return begin_getFine(null, false, __cb);
    }

    public Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_getFine __cb)
    {
        return begin_getFine(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getFine(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getFine_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getFine_name, __cb);
        try
        {
            __result.__prepare(__getFine_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getFine(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getFine_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getId_name = "getId";

    public int getId()
    {
        return getId(null, false);
    }

    public int getId(java.util.Map<String, String> __ctx)
    {
        return getId(__ctx, true);
    }

    private int getId(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getId");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getId(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getId()
    {
        return begin_getId(null, false, null);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx)
    {
        return begin_getId(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getId(Ice.Callback __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getId(Callback_ETimeRecordCondiviso_getId __cb)
    {
        return begin_getId(null, false, __cb);
    }

    public Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_getId __cb)
    {
        return begin_getId(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getId(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getId_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getId_name, __cb);
        try
        {
            __result.__prepare(__getId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public int end_getId(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getId_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            int __ret;
            __ret = __is.readInt();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getInizio_name = "getInizio";

    public java.sql.Timestamp getInizio()
    {
        return getInizio(null, false);
    }

    public java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx)
    {
        return getInizio(__ctx, true);
    }

    private java.sql.Timestamp getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getInizio");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getInizio(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getInizio()
    {
        return begin_getInizio(null, false, null);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx)
    {
        return begin_getInizio(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getInizio(Ice.Callback __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getInizio(Callback_ETimeRecordCondiviso_getInizio __cb)
    {
        return begin_getInizio(null, false, __cb);
    }

    public Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_getInizio __cb)
    {
        return begin_getInizio(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getInizio(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getInizio_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getInizio_name, __cb);
        try
        {
            __result.__prepare(__getInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public java.sql.Timestamp end_getInizio(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getInizio_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            java.sql.Timestamp __ret;
            __ret = (java.sql.Timestamp)__is.readSerializable();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setCommento_name = "setCommento";

    public void setCommento(String commento)
    {
        setCommento(commento, null, false);
    }

    public void setCommento(String commento, java.util.Map<String, String> __ctx)
    {
        setCommento(commento, __ctx, true);
    }

    private void setCommento(String commento, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCommento", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setCommento(commento, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCommento(String commento)
    {
        return begin_setCommento(commento, null, false, null);
    }

    public Ice.AsyncResult begin_setCommento(String commento, java.util.Map<String, String> __ctx)
    {
        return begin_setCommento(commento, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCommento(String commento, Ice.Callback __cb)
    {
        return begin_setCommento(commento, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCommento(String commento, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCommento(commento, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCommento(String commento, Callback_ETimeRecordCondiviso_setCommento __cb)
    {
        return begin_setCommento(commento, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCommento(String commento, java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_setCommento __cb)
    {
        return begin_setCommento(commento, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCommento(String commento, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCommento_name, __cb);
        try
        {
            __result.__prepare(__setCommento_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(commento);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCommento(Ice.AsyncResult __result)
    {
        __end(__result, __setCommento_name);
    }

    private static final String __setConsulente_name = "setConsulente";

    public void setConsulente(EConsulenteCondiviso consulente)
    {
        setConsulente(consulente, null, false);
    }

    public void setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        setConsulente(consulente, __ctx, true);
    }

    private void setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setConsulente", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setConsulente(consulente, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente)
    {
        return begin_setConsulente(consulente, null, false, null);
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx)
    {
        return begin_setConsulente(consulente, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, Ice.Callback __cb)
    {
        return begin_setConsulente(consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConsulente(consulente, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, Callback_ETimeRecordCondiviso_setConsulente __cb)
    {
        return begin_setConsulente(consulente, null, false, __cb);
    }

    public Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_setConsulente __cb)
    {
        return begin_setConsulente(consulente, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConsulente(EConsulenteCondiviso consulente, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConsulente_name, __cb);
        try
        {
            __result.__prepare(__setConsulente_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeObject(consulente);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setConsulente(Ice.AsyncResult __result)
    {
        __end(__result, __setConsulente_name);
    }

    private static final String __setFine_name = "setFine";

    public void setFine(java.sql.Timestamp fine)
    {
        setFine(fine, null, false);
    }

    public void setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx)
    {
        setFine(fine, __ctx, true);
    }

    private void setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setFine", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setFine(fine, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine)
    {
        return begin_setFine(fine, null, false, null);
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx)
    {
        return begin_setFine(fine, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, Ice.Callback __cb)
    {
        return begin_setFine(fine, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setFine(fine, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, Callback_ETimeRecordCondiviso_setFine __cb)
    {
        return begin_setFine(fine, null, false, __cb);
    }

    public Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_setFine __cb)
    {
        return begin_setFine(fine, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setFine(java.sql.Timestamp fine, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setFine_name, __cb);
        try
        {
            __result.__prepare(__setFine_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(fine);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setFine(Ice.AsyncResult __result)
    {
        __end(__result, __setFine_name);
    }

    private static final String __setId_name = "setId";

    public void setId(int id)
    {
        setId(id, null, false);
    }

    public void setId(int id, java.util.Map<String, String> __ctx)
    {
        setId(id, __ctx, true);
    }

    private void setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setId", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setId(id, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setId(int id)
    {
        return begin_setId(id, null, false, null);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx)
    {
        return begin_setId(id, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setId(int id, Ice.Callback __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, Callback_ETimeRecordCondiviso_setId __cb)
    {
        return begin_setId(id, null, false, __cb);
    }

    public Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_setId __cb)
    {
        return begin_setId(id, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setId(int id, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setId_name, __cb);
        try
        {
            __result.__prepare(__setId_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(id);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setId(Ice.AsyncResult __result)
    {
        __end(__result, __setId_name);
    }

    private static final String __setInizio_name = "setInizio";

    public void setInizio(java.sql.Timestamp inizio)
    {
        setInizio(inizio, null, false);
    }

    public void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        setInizio(inizio, __ctx, true);
    }

    private void setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setInizio", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setInizio(inizio, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio)
    {
        return begin_setInizio(inizio, null, false, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx)
    {
        return begin_setInizio(inizio, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, Callback_ETimeRecordCondiviso_setInizio __cb)
    {
        return begin_setInizio(inizio, null, false, __cb);
    }

    public Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, Callback_ETimeRecordCondiviso_setInizio __cb)
    {
        return begin_setInizio(inizio, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setInizio(java.sql.Timestamp inizio, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setInizio_name, __cb);
        try
        {
            __result.__prepare(__setInizio_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeSerializable(inizio);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setInizio(Ice.AsyncResult __result)
    {
        __end(__result, __setInizio_name);
    }

    private static final String __getCategoria_name = "getCategoria";

    public String getCategoria()
    {
        return getCategoria(null, false);
    }

    public String getCategoria(java.util.Map<String, String> __ctx)
    {
        return getCategoria(__ctx, true);
    }

    private String getCategoria(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCategoria", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCategoria");
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    return __del.getCategoria(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCategoria()
    {
        return begin_getCategoria(null, false, null);
    }

    public Ice.AsyncResult begin_getCategoria(java.util.Map<String, String> __ctx)
    {
        return begin_getCategoria(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCategoria(Ice.Callback __cb)
    {
        return begin_getCategoria(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCategoria(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCategoria(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCategoria(Callback_ETimeRecordNonLavorativoCondiviso_getCategoria __cb)
    {
        return begin_getCategoria(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCategoria(java.util.Map<String, String> __ctx, Callback_ETimeRecordNonLavorativoCondiviso_getCategoria __cb)
    {
        return begin_getCategoria(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCategoria(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCategoria_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCategoria_name, __cb);
        try
        {
            __result.__prepare(__getCategoria_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_getCategoria(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCategoria_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setCategoria_name = "setCategoria";

    public void setCategoria(String categoria)
    {
        setCategoria(categoria, null, false);
    }

    public void setCategoria(String categoria, java.util.Map<String, String> __ctx)
    {
        setCategoria(categoria, __ctx, true);
    }

    private void setCategoria(String categoria, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setCategoria", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ETimeRecordNonLavorativoCondivisoDel __del = (_ETimeRecordNonLavorativoCondivisoDel)__delBase;
                    __del.setCategoria(categoria, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setCategoria(String categoria)
    {
        return begin_setCategoria(categoria, null, false, null);
    }

    public Ice.AsyncResult begin_setCategoria(String categoria, java.util.Map<String, String> __ctx)
    {
        return begin_setCategoria(categoria, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setCategoria(String categoria, Ice.Callback __cb)
    {
        return begin_setCategoria(categoria, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCategoria(String categoria, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setCategoria(categoria, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setCategoria(String categoria, Callback_ETimeRecordNonLavorativoCondiviso_setCategoria __cb)
    {
        return begin_setCategoria(categoria, null, false, __cb);
    }

    public Ice.AsyncResult begin_setCategoria(String categoria, java.util.Map<String, String> __ctx, Callback_ETimeRecordNonLavorativoCondiviso_setCategoria __cb)
    {
        return begin_setCategoria(categoria, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setCategoria(String categoria, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setCategoria_name, __cb);
        try
        {
            __result.__prepare(__setCategoria_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(categoria);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_setCategoria(Ice.AsyncResult __result)
    {
        __end(__result, __setCategoria_name);
    }

    public static ETimeRecordNonLavorativoCondivisoPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETimeRecordNonLavorativoCondivisoPrx)
            {
                __d = (ETimeRecordNonLavorativoCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ETimeRecordNonLavorativoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETimeRecordNonLavorativoCondivisoPrx)
            {
                __d = (ETimeRecordNonLavorativoCondivisoPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ETimeRecordNonLavorativoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ETimeRecordNonLavorativoCondivisoPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ETimeRecordNonLavorativoCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ETimeRecordNonLavorativoCondivisoPrx)
            {
                __d = (ETimeRecordNonLavorativoCondivisoPrx)__obj;
            }
            else
            {
                ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ETimeRecordNonLavorativoCondivisoPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ETimeRecordNonLavorativoCondivisoPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ETimeRecordNonLavorativoCondivisoPrxHelper __h = new ETimeRecordNonLavorativoCondivisoPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Condivisione::EntityCondivise::ETimeRecordCondiviso",
        "::Condivisione::EntityCondivise::ETimeRecordNonLavorativoCondiviso",
        "::Condivisione::EntityCondivise::EntityCondivisa",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ETimeRecordNonLavorativoCondivisoDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ETimeRecordNonLavorativoCondivisoDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ETimeRecordNonLavorativoCondivisoPrx v)
    {
        __os.writeProxy(v);
    }

    public static ETimeRecordNonLavorativoCondivisoPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ETimeRecordNonLavorativoCondivisoPrxHelper result = new ETimeRecordNonLavorativoCondivisoPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
